# Generated from Solidity.g4 by ANTLR 4.10.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,128,1057,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,1,0,1,0,1,0,1,0,1,0,5,0,182,8,0,10,0,
        12,0,185,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,3,3,198,
        8,3,1,4,1,4,3,4,202,8,4,1,5,3,5,205,8,5,1,5,1,5,1,6,1,6,1,7,1,7,
        1,7,1,7,3,7,215,8,7,1,7,1,7,1,7,1,7,3,7,221,8,7,1,7,1,7,3,7,225,
        8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,5,7,235,8,7,10,7,12,7,238,9,
        7,1,7,1,7,1,7,1,7,1,7,3,7,245,8,7,1,8,1,8,1,8,3,8,250,8,8,1,9,3,
        9,253,8,9,1,9,1,9,1,9,1,9,1,9,1,9,5,9,261,8,9,10,9,12,9,264,9,9,
        3,9,266,8,9,1,9,1,9,5,9,270,8,9,10,9,12,9,273,9,9,1,9,1,9,1,10,1,
        10,1,10,3,10,280,8,10,1,10,3,10,283,8,10,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,3,11,292,8,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,5,12,
        301,8,12,10,12,12,12,304,9,12,1,12,1,12,1,12,3,12,309,8,12,1,12,
        1,12,1,13,1,13,1,13,1,13,1,13,5,13,318,8,13,10,13,12,13,321,9,13,
        1,13,1,13,3,13,325,8,13,1,14,1,14,1,14,1,14,1,14,3,14,332,8,14,1,
        14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,5,15,344,8,15,10,
        15,12,15,347,9,15,3,15,349,8,15,1,15,1,15,1,16,1,16,1,16,3,16,356,
        8,16,1,16,1,16,5,16,360,8,16,10,16,12,16,363,9,16,1,16,1,16,3,16,
        367,8,16,1,17,1,17,1,17,1,17,3,17,373,8,17,1,17,1,17,3,17,377,8,
        17,1,18,1,18,1,18,1,18,3,18,383,8,18,1,18,1,18,1,18,3,18,388,8,18,
        1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,5,20,401,
        8,20,10,20,12,20,404,9,20,1,21,1,21,1,21,3,21,409,8,21,1,21,3,21,
        412,8,21,1,22,1,22,1,22,1,22,3,22,418,8,22,1,22,1,22,1,23,1,23,1,
        23,1,23,3,23,426,8,23,1,23,1,23,5,23,430,8,23,10,23,12,23,433,9,
        23,1,23,1,23,1,24,1,24,1,25,1,25,1,25,1,25,5,25,443,8,25,10,25,12,
        25,446,9,25,3,25,448,8,25,1,25,1,25,1,26,1,26,3,26,454,8,26,1,26,
        3,26,457,8,26,1,27,1,27,1,27,1,27,5,27,463,8,27,10,27,12,27,466,
        9,27,3,27,468,8,27,1,27,1,27,1,28,1,28,3,28,474,8,28,1,28,3,28,477,
        8,28,1,29,1,29,3,29,481,8,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,
        3,30,490,8,30,1,30,1,30,1,30,3,30,495,8,30,1,30,5,30,498,8,30,10,
        30,12,30,501,9,30,1,31,1,31,1,31,5,31,506,8,31,10,31,12,31,509,9,
        31,1,32,1,32,1,32,1,32,3,32,515,8,32,1,32,1,32,1,32,1,32,1,33,1,
        33,1,33,1,33,3,33,525,8,33,1,34,1,34,1,35,1,35,1,36,1,36,5,36,533,
        8,36,10,36,12,36,536,9,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,
        1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,553,8,37,1,38,1,38,1,38,
        1,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,565,8,39,1,40,1,40,1,40,
        3,40,570,8,40,1,40,1,40,4,40,574,8,40,11,40,12,40,575,1,41,1,41,
        3,41,580,8,41,1,41,3,41,583,8,41,1,41,1,41,1,42,1,42,1,42,1,42,1,
        42,1,42,1,43,1,43,1,43,1,43,3,43,597,8,43,1,43,1,43,3,43,601,8,43,
        1,43,3,43,604,8,43,1,43,1,43,1,43,1,44,1,44,3,44,611,8,44,1,45,1,
        45,3,45,615,8,45,1,45,1,45,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,
        46,1,47,1,47,1,47,1,48,1,48,1,48,1,49,1,49,3,49,635,8,49,1,49,1,
        49,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,1,
        52,1,52,3,52,653,8,52,1,52,1,52,3,52,657,8,52,1,52,1,52,1,53,3,53,
        662,8,53,1,53,1,53,3,53,666,8,53,5,53,668,8,53,10,53,12,53,671,9,
        53,1,54,1,54,3,54,675,8,54,1,54,5,54,678,8,54,10,54,12,54,681,9,
        54,1,54,3,54,684,8,54,1,54,1,54,1,55,1,55,3,55,690,8,55,1,55,1,55,
        1,55,1,55,1,55,1,55,1,55,1,55,1,55,3,55,701,8,55,1,56,1,56,1,56,
        1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,
        1,56,1,56,1,56,1,56,1,56,1,56,1,56,3,56,726,8,56,1,56,1,56,1,56,
        1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,
        1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,
        1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,
        1,56,1,56,1,56,1,56,1,56,3,56,775,8,56,1,56,1,56,1,56,1,56,3,56,
        781,8,56,1,56,1,56,3,56,785,8,56,1,56,1,56,1,56,1,56,1,56,1,56,1,
        56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,5,56,801,8,56,10,56,12,56,
        804,9,56,1,57,1,57,1,57,1,57,1,57,1,57,1,57,3,57,813,8,57,1,57,1,
        57,1,57,1,57,1,57,3,57,820,8,57,3,57,822,8,57,1,58,1,58,1,58,5,58,
        827,8,58,10,58,12,58,830,9,58,1,59,1,59,1,59,5,59,835,8,59,10,59,
        12,59,838,9,59,1,59,3,59,841,8,59,1,60,1,60,1,60,1,60,1,61,1,61,
        3,61,849,8,61,1,61,1,61,3,61,853,8,61,3,61,855,8,61,1,62,1,62,1,
        62,1,62,1,62,1,63,1,63,3,63,864,8,63,1,63,1,63,3,63,868,8,63,5,63,
        870,8,63,10,63,12,63,873,9,63,1,63,1,63,1,63,1,63,1,63,5,63,880,
        8,63,10,63,12,63,883,9,63,3,63,885,8,63,1,63,3,63,888,8,63,1,64,
        1,64,3,64,892,8,64,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,
        1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,3,65,912,8,65,1,66,
        1,66,5,66,916,8,66,10,66,12,66,919,9,66,1,66,1,66,1,67,1,67,3,67,
        925,8,67,1,68,1,68,1,68,1,68,3,68,931,8,68,1,68,1,68,3,68,935,8,
        68,1,68,1,68,5,68,939,8,68,10,68,12,68,942,9,68,1,68,3,68,945,8,
        68,1,69,1,69,1,69,1,69,3,69,951,8,69,1,70,1,70,1,70,1,70,1,71,1,
        71,1,71,5,71,960,8,71,10,71,12,71,963,9,71,1,72,1,72,1,72,1,73,1,
        73,1,73,1,74,1,74,1,74,5,74,974,8,74,10,74,12,74,977,9,74,1,75,1,
        75,1,75,3,75,982,8,75,1,75,1,75,1,75,1,75,3,75,988,8,75,1,76,1,76,
        1,76,1,76,3,76,994,8,76,1,76,1,76,3,76,998,8,76,1,76,1,76,1,77,1,
        77,1,77,1,77,1,78,1,78,1,78,1,78,1,78,1,78,1,79,1,79,1,79,1,79,1,
        80,1,80,1,80,1,80,1,80,3,80,1021,8,80,1,80,3,80,1024,8,80,1,81,1,
        81,3,81,1028,8,81,1,81,1,81,3,81,1032,8,81,1,82,1,82,1,82,1,83,1,
        83,1,83,1,83,1,84,1,84,3,84,1043,8,84,1,85,1,85,1,86,4,86,1048,8,
        86,11,86,12,86,1049,1,87,4,87,1053,8,87,11,87,12,87,1054,1,87,0,
        2,60,112,88,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,
        38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,
        82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,
        120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,
        152,154,156,158,160,162,164,166,168,170,172,174,0,14,1,0,3,9,1,0,
        18,20,1,0,38,40,4,0,106,106,113,113,117,117,119,119,1,0,56,57,1,
        0,60,61,1,0,62,63,2,0,12,12,66,67,1,0,68,69,1,0,5,8,1,0,72,73,2,
        0,9,9,77,86,1,0,99,100,4,0,13,13,40,40,52,52,123,123,1186,0,183,
        1,0,0,0,2,188,1,0,0,0,4,193,1,0,0,0,6,197,1,0,0,0,8,199,1,0,0,0,
        10,204,1,0,0,0,12,208,1,0,0,0,14,244,1,0,0,0,16,246,1,0,0,0,18,252,
        1,0,0,0,20,276,1,0,0,0,22,291,1,0,0,0,24,293,1,0,0,0,26,312,1,0,
        0,0,28,326,1,0,0,0,30,335,1,0,0,0,32,352,1,0,0,0,34,368,1,0,0,0,
        36,387,1,0,0,0,38,389,1,0,0,0,40,402,1,0,0,0,42,405,1,0,0,0,44,413,
        1,0,0,0,46,421,1,0,0,0,48,436,1,0,0,0,50,438,1,0,0,0,52,451,1,0,
        0,0,54,458,1,0,0,0,56,471,1,0,0,0,58,478,1,0,0,0,60,489,1,0,0,0,
        62,502,1,0,0,0,64,510,1,0,0,0,66,520,1,0,0,0,68,526,1,0,0,0,70,528,
        1,0,0,0,72,530,1,0,0,0,74,552,1,0,0,0,76,554,1,0,0,0,78,557,1,0,
        0,0,80,566,1,0,0,0,82,577,1,0,0,0,84,586,1,0,0,0,86,592,1,0,0,0,
        88,610,1,0,0,0,90,612,1,0,0,0,92,618,1,0,0,0,94,626,1,0,0,0,96,629,
        1,0,0,0,98,632,1,0,0,0,100,638,1,0,0,0,102,641,1,0,0,0,104,652,1,
        0,0,0,106,661,1,0,0,0,108,672,1,0,0,0,110,700,1,0,0,0,112,725,1,
        0,0,0,114,821,1,0,0,0,116,823,1,0,0,0,118,831,1,0,0,0,120,842,1,
        0,0,0,122,854,1,0,0,0,124,856,1,0,0,0,126,887,1,0,0,0,128,891,1,
        0,0,0,130,911,1,0,0,0,132,913,1,0,0,0,134,924,1,0,0,0,136,930,1,
        0,0,0,138,946,1,0,0,0,140,952,1,0,0,0,142,956,1,0,0,0,144,964,1,
        0,0,0,146,967,1,0,0,0,148,970,1,0,0,0,150,987,1,0,0,0,152,989,1,
        0,0,0,154,1001,1,0,0,0,156,1005,1,0,0,0,158,1011,1,0,0,0,160,1020,
        1,0,0,0,162,1025,1,0,0,0,164,1033,1,0,0,0,166,1036,1,0,0,0,168,1040,
        1,0,0,0,170,1044,1,0,0,0,172,1047,1,0,0,0,174,1052,1,0,0,0,176,182,
        3,2,1,0,177,182,3,14,7,0,178,182,3,30,15,0,179,182,3,46,23,0,180,
        182,3,18,9,0,181,176,1,0,0,0,181,177,1,0,0,0,181,178,1,0,0,0,181,
        179,1,0,0,0,181,180,1,0,0,0,182,185,1,0,0,0,183,181,1,0,0,0,183,
        184,1,0,0,0,184,186,1,0,0,0,185,183,1,0,0,0,186,187,5,0,0,1,187,
        1,1,0,0,0,188,189,5,1,0,0,189,190,3,4,2,0,190,191,3,6,3,0,191,192,
        5,2,0,0,192,3,1,0,0,0,193,194,3,170,85,0,194,5,1,0,0,0,195,198,3,
        8,4,0,196,198,3,112,56,0,197,195,1,0,0,0,197,196,1,0,0,0,198,7,1,
        0,0,0,199,201,3,10,5,0,200,202,3,10,5,0,201,200,1,0,0,0,201,202,
        1,0,0,0,202,9,1,0,0,0,203,205,3,12,6,0,204,203,1,0,0,0,204,205,1,
        0,0,0,205,206,1,0,0,0,206,207,5,125,0,0,207,11,1,0,0,0,208,209,7,
        0,0,0,209,13,1,0,0,0,210,211,5,10,0,0,211,214,5,124,0,0,212,213,
        5,11,0,0,213,215,3,170,85,0,214,212,1,0,0,0,214,215,1,0,0,0,215,
        216,1,0,0,0,216,245,5,2,0,0,217,220,5,10,0,0,218,221,5,12,0,0,219,
        221,3,170,85,0,220,218,1,0,0,0,220,219,1,0,0,0,221,224,1,0,0,0,222,
        223,5,11,0,0,223,225,3,170,85,0,224,222,1,0,0,0,224,225,1,0,0,0,
        225,226,1,0,0,0,226,227,5,13,0,0,227,228,5,124,0,0,228,245,5,2,0,
        0,229,230,5,10,0,0,230,231,5,14,0,0,231,236,3,16,8,0,232,233,5,15,
        0,0,233,235,3,16,8,0,234,232,1,0,0,0,235,238,1,0,0,0,236,234,1,0,
        0,0,236,237,1,0,0,0,237,239,1,0,0,0,238,236,1,0,0,0,239,240,5,16,
        0,0,240,241,5,13,0,0,241,242,5,124,0,0,242,243,5,2,0,0,243,245,1,
        0,0,0,244,210,1,0,0,0,244,217,1,0,0,0,244,229,1,0,0,0,245,15,1,0,
        0,0,246,249,3,170,85,0,247,248,5,11,0,0,248,250,3,170,85,0,249,247,
        1,0,0,0,249,250,1,0,0,0,250,17,1,0,0,0,251,253,5,17,0,0,252,251,
        1,0,0,0,252,253,1,0,0,0,253,254,1,0,0,0,254,255,7,1,0,0,255,265,
        3,170,85,0,256,257,5,21,0,0,257,262,3,20,10,0,258,259,5,15,0,0,259,
        261,3,20,10,0,260,258,1,0,0,0,261,264,1,0,0,0,262,260,1,0,0,0,262,
        263,1,0,0,0,263,266,1,0,0,0,264,262,1,0,0,0,265,256,1,0,0,0,265,
        266,1,0,0,0,266,267,1,0,0,0,267,271,5,14,0,0,268,270,3,22,11,0,269,
        268,1,0,0,0,270,273,1,0,0,0,271,269,1,0,0,0,271,272,1,0,0,0,272,
        274,1,0,0,0,273,271,1,0,0,0,274,275,5,16,0,0,275,19,1,0,0,0,276,
        282,3,62,31,0,277,279,5,22,0,0,278,280,3,116,58,0,279,278,1,0,0,
        0,279,280,1,0,0,0,280,281,1,0,0,0,281,283,5,23,0,0,282,277,1,0,0,
        0,282,283,1,0,0,0,283,21,1,0,0,0,284,292,3,24,12,0,285,292,3,28,
        14,0,286,292,3,30,15,0,287,292,3,32,16,0,288,292,3,34,17,0,289,292,
        3,44,22,0,290,292,3,46,23,0,291,284,1,0,0,0,291,285,1,0,0,0,291,
        286,1,0,0,0,291,287,1,0,0,0,291,288,1,0,0,0,291,289,1,0,0,0,291,
        290,1,0,0,0,292,23,1,0,0,0,293,302,3,60,30,0,294,301,5,115,0,0,295,
        301,5,112,0,0,296,301,5,114,0,0,297,301,5,106,0,0,298,301,5,107,
        0,0,299,301,3,26,13,0,300,294,1,0,0,0,300,295,1,0,0,0,300,296,1,
        0,0,0,300,297,1,0,0,0,300,298,1,0,0,0,300,299,1,0,0,0,301,304,1,
        0,0,0,302,300,1,0,0,0,302,303,1,0,0,0,303,305,1,0,0,0,304,302,1,
        0,0,0,305,308,3,170,85,0,306,307,5,9,0,0,307,309,3,112,56,0,308,
        306,1,0,0,0,308,309,1,0,0,0,309,310,1,0,0,0,310,311,5,2,0,0,311,
        25,1,0,0,0,312,324,5,24,0,0,313,314,5,22,0,0,314,319,3,62,31,0,315,
        316,5,15,0,0,316,318,3,62,31,0,317,315,1,0,0,0,318,321,1,0,0,0,319,
        317,1,0,0,0,319,320,1,0,0,0,320,322,1,0,0,0,321,319,1,0,0,0,322,
        323,5,23,0,0,323,325,1,0,0,0,324,313,1,0,0,0,324,325,1,0,0,0,325,
        27,1,0,0,0,326,327,5,25,0,0,327,328,3,170,85,0,328,331,5,26,0,0,
        329,332,5,12,0,0,330,332,3,60,30,0,331,329,1,0,0,0,331,330,1,0,0,
        0,332,333,1,0,0,0,333,334,5,2,0,0,334,29,1,0,0,0,335,336,5,27,0,
        0,336,337,3,170,85,0,337,348,5,14,0,0,338,339,3,58,29,0,339,345,
        5,2,0,0,340,341,3,58,29,0,341,342,5,2,0,0,342,344,1,0,0,0,343,340,
        1,0,0,0,344,347,1,0,0,0,345,343,1,0,0,0,345,346,1,0,0,0,346,349,
        1,0,0,0,347,345,1,0,0,0,348,338,1,0,0,0,348,349,1,0,0,0,349,350,
        1,0,0,0,350,351,5,16,0,0,351,31,1,0,0,0,352,353,5,28,0,0,353,355,
        3,170,85,0,354,356,3,50,25,0,355,354,1,0,0,0,355,356,1,0,0,0,356,
        361,1,0,0,0,357,360,5,116,0,0,358,360,3,26,13,0,359,357,1,0,0,0,
        359,358,1,0,0,0,360,363,1,0,0,0,361,359,1,0,0,0,361,362,1,0,0,0,
        362,366,1,0,0,0,363,361,1,0,0,0,364,367,5,2,0,0,365,367,3,72,36,
        0,366,364,1,0,0,0,366,365,1,0,0,0,367,33,1,0,0,0,368,369,3,36,18,
        0,369,370,3,50,25,0,370,372,3,40,20,0,371,373,3,38,19,0,372,371,
        1,0,0,0,372,373,1,0,0,0,373,376,1,0,0,0,374,377,5,2,0,0,375,377,
        3,72,36,0,376,374,1,0,0,0,376,375,1,0,0,0,377,35,1,0,0,0,378,382,
        5,29,0,0,379,383,3,170,85,0,380,383,5,122,0,0,381,383,5,121,0,0,
        382,379,1,0,0,0,382,380,1,0,0,0,382,381,1,0,0,0,382,383,1,0,0,0,
        383,388,1,0,0,0,384,388,5,120,0,0,385,388,5,121,0,0,386,388,5,122,
        0,0,387,378,1,0,0,0,387,384,1,0,0,0,387,385,1,0,0,0,387,386,1,0,
        0,0,388,37,1,0,0,0,389,390,5,30,0,0,390,391,3,50,25,0,391,39,1,0,
        0,0,392,401,3,42,21,0,393,401,3,70,35,0,394,401,5,110,0,0,395,401,
        5,115,0,0,396,401,5,112,0,0,397,401,5,114,0,0,398,401,5,116,0,0,
        399,401,3,26,13,0,400,392,1,0,0,0,400,393,1,0,0,0,400,394,1,0,0,
        0,400,395,1,0,0,0,400,396,1,0,0,0,400,397,1,0,0,0,400,398,1,0,0,
        0,400,399,1,0,0,0,401,404,1,0,0,0,402,400,1,0,0,0,402,403,1,0,0,
        0,403,41,1,0,0,0,404,402,1,0,0,0,405,411,3,170,85,0,406,408,5,22,
        0,0,407,409,3,116,58,0,408,407,1,0,0,0,408,409,1,0,0,0,409,410,1,
        0,0,0,410,412,5,23,0,0,411,406,1,0,0,0,411,412,1,0,0,0,412,43,1,
        0,0,0,413,414,5,31,0,0,414,415,3,170,85,0,415,417,3,54,27,0,416,
        418,5,104,0,0,417,416,1,0,0,0,417,418,1,0,0,0,418,419,1,0,0,0,419,
        420,5,2,0,0,420,45,1,0,0,0,421,422,5,32,0,0,422,423,3,170,85,0,423,
        425,5,14,0,0,424,426,3,48,24,0,425,424,1,0,0,0,425,426,1,0,0,0,426,
        431,1,0,0,0,427,428,5,15,0,0,428,430,3,48,24,0,429,427,1,0,0,0,430,
        433,1,0,0,0,431,429,1,0,0,0,431,432,1,0,0,0,432,434,1,0,0,0,433,
        431,1,0,0,0,434,435,5,16,0,0,435,47,1,0,0,0,436,437,3,170,85,0,437,
        49,1,0,0,0,438,447,5,22,0,0,439,444,3,52,26,0,440,441,5,15,0,0,441,
        443,3,52,26,0,442,440,1,0,0,0,443,446,1,0,0,0,444,442,1,0,0,0,444,
        445,1,0,0,0,445,448,1,0,0,0,446,444,1,0,0,0,447,439,1,0,0,0,447,
        448,1,0,0,0,448,449,1,0,0,0,449,450,5,23,0,0,450,51,1,0,0,0,451,
        453,3,60,30,0,452,454,3,68,34,0,453,452,1,0,0,0,453,454,1,0,0,0,
        454,456,1,0,0,0,455,457,3,170,85,0,456,455,1,0,0,0,456,457,1,0,0,
        0,457,53,1,0,0,0,458,467,5,22,0,0,459,464,3,56,28,0,460,461,5,15,
        0,0,461,463,3,56,28,0,462,460,1,0,0,0,463,466,1,0,0,0,464,462,1,
        0,0,0,464,465,1,0,0,0,465,468,1,0,0,0,466,464,1,0,0,0,467,459,1,
        0,0,0,467,468,1,0,0,0,468,469,1,0,0,0,469,470,5,23,0,0,470,55,1,
        0,0,0,471,473,3,60,30,0,472,474,5,111,0,0,473,472,1,0,0,0,473,474,
        1,0,0,0,474,476,1,0,0,0,475,477,3,170,85,0,476,475,1,0,0,0,476,477,
        1,0,0,0,477,57,1,0,0,0,478,480,3,60,30,0,479,481,3,68,34,0,480,479,
        1,0,0,0,480,481,1,0,0,0,481,482,1,0,0,0,482,483,3,170,85,0,483,59,
        1,0,0,0,484,485,6,30,-1,0,485,490,3,110,55,0,486,490,3,62,31,0,487,
        490,3,64,32,0,488,490,3,66,33,0,489,484,1,0,0,0,489,486,1,0,0,0,
        489,487,1,0,0,0,489,488,1,0,0,0,490,499,1,0,0,0,491,492,10,2,0,0,
        492,494,5,33,0,0,493,495,3,112,56,0,494,493,1,0,0,0,494,495,1,0,
        0,0,495,496,1,0,0,0,496,498,5,34,0,0,497,491,1,0,0,0,498,501,1,0,
        0,0,499,497,1,0,0,0,499,500,1,0,0,0,500,61,1,0,0,0,501,499,1,0,0,
        0,502,507,3,170,85,0,503,504,5,35,0,0,504,506,3,170,85,0,505,503,
        1,0,0,0,506,509,1,0,0,0,507,505,1,0,0,0,507,508,1,0,0,0,508,63,1,
        0,0,0,509,507,1,0,0,0,510,511,5,36,0,0,511,514,5,22,0,0,512,515,
        3,110,55,0,513,515,3,62,31,0,514,512,1,0,0,0,514,513,1,0,0,0,515,
        516,1,0,0,0,516,517,5,37,0,0,517,518,3,60,30,0,518,519,5,23,0,0,
        519,65,1,0,0,0,520,521,5,29,0,0,521,522,3,50,25,0,522,524,3,40,20,
        0,523,525,3,38,19,0,524,523,1,0,0,0,524,525,1,0,0,0,525,67,1,0,0,
        0,526,527,7,2,0,0,527,69,1,0,0,0,528,529,7,3,0,0,529,71,1,0,0,0,
        530,534,5,14,0,0,531,533,3,74,37,0,532,531,1,0,0,0,533,536,1,0,0,
        0,534,532,1,0,0,0,534,535,1,0,0,0,535,537,1,0,0,0,536,534,1,0,0,
        0,537,538,5,16,0,0,538,73,1,0,0,0,539,553,3,78,39,0,540,553,3,80,
        40,0,541,553,3,84,42,0,542,553,3,86,43,0,543,553,3,72,36,0,544,553,
        3,90,45,0,545,553,3,92,46,0,546,553,3,94,47,0,547,553,3,96,48,0,
        548,553,3,98,49,0,549,553,3,100,50,0,550,553,3,102,51,0,551,553,
        3,88,44,0,552,539,1,0,0,0,552,540,1,0,0,0,552,541,1,0,0,0,552,542,
        1,0,0,0,552,543,1,0,0,0,552,544,1,0,0,0,552,545,1,0,0,0,552,546,
        1,0,0,0,552,547,1,0,0,0,552,548,1,0,0,0,552,549,1,0,0,0,552,550,
        1,0,0,0,552,551,1,0,0,0,553,75,1,0,0,0,554,555,3,112,56,0,555,556,
        5,2,0,0,556,77,1,0,0,0,557,558,5,41,0,0,558,559,5,22,0,0,559,560,
        3,112,56,0,560,561,5,23,0,0,561,564,3,74,37,0,562,563,5,42,0,0,563,
        565,3,74,37,0,564,562,1,0,0,0,564,565,1,0,0,0,565,79,1,0,0,0,566,
        567,5,43,0,0,567,569,3,112,56,0,568,570,3,38,19,0,569,568,1,0,0,
        0,569,570,1,0,0,0,570,571,1,0,0,0,571,573,3,72,36,0,572,574,3,82,
        41,0,573,572,1,0,0,0,574,575,1,0,0,0,575,573,1,0,0,0,575,576,1,0,
        0,0,576,81,1,0,0,0,577,582,5,44,0,0,578,580,3,170,85,0,579,578,1,
        0,0,0,579,580,1,0,0,0,580,581,1,0,0,0,581,583,3,50,25,0,582,579,
        1,0,0,0,582,583,1,0,0,0,583,584,1,0,0,0,584,585,3,72,36,0,585,83,
        1,0,0,0,586,587,5,45,0,0,587,588,5,22,0,0,588,589,3,112,56,0,589,
        590,5,23,0,0,590,591,3,74,37,0,591,85,1,0,0,0,592,593,5,26,0,0,593,
        596,5,22,0,0,594,597,3,88,44,0,595,597,5,2,0,0,596,594,1,0,0,0,596,
        595,1,0,0,0,597,600,1,0,0,0,598,601,3,76,38,0,599,601,5,2,0,0,600,
        598,1,0,0,0,600,599,1,0,0,0,601,603,1,0,0,0,602,604,3,112,56,0,603,
        602,1,0,0,0,603,604,1,0,0,0,604,605,1,0,0,0,605,606,5,23,0,0,606,
        607,3,74,37,0,607,87,1,0,0,0,608,611,3,104,52,0,609,611,3,76,38,
        0,610,608,1,0,0,0,610,609,1,0,0,0,611,89,1,0,0,0,612,614,5,46,0,
        0,613,615,5,124,0,0,614,613,1,0,0,0,614,615,1,0,0,0,615,616,1,0,
        0,0,616,617,3,132,66,0,617,91,1,0,0,0,618,619,5,47,0,0,619,620,3,
        74,37,0,620,621,5,45,0,0,621,622,5,22,0,0,622,623,3,112,56,0,623,
        624,5,23,0,0,624,625,5,2,0,0,625,93,1,0,0,0,626,627,5,108,0,0,627,
        628,5,2,0,0,628,95,1,0,0,0,629,630,5,105,0,0,630,631,5,2,0,0,631,
        97,1,0,0,0,632,634,5,48,0,0,633,635,3,112,56,0,634,633,1,0,0,0,634,
        635,1,0,0,0,635,636,1,0,0,0,636,637,5,2,0,0,637,99,1,0,0,0,638,639,
        5,49,0,0,639,640,5,2,0,0,640,101,1,0,0,0,641,642,5,50,0,0,642,643,
        3,124,62,0,643,644,5,2,0,0,644,103,1,0,0,0,645,646,5,51,0,0,646,
        653,3,108,54,0,647,653,3,58,29,0,648,649,5,22,0,0,649,650,3,106,
        53,0,650,651,5,23,0,0,651,653,1,0,0,0,652,645,1,0,0,0,652,647,1,
        0,0,0,652,648,1,0,0,0,653,656,1,0,0,0,654,655,5,9,0,0,655,657,3,
        112,56,0,656,654,1,0,0,0,656,657,1,0,0,0,657,658,1,0,0,0,658,659,
        5,2,0,0,659,105,1,0,0,0,660,662,3,58,29,0,661,660,1,0,0,0,661,662,
        1,0,0,0,662,669,1,0,0,0,663,665,5,15,0,0,664,666,3,58,29,0,665,664,
        1,0,0,0,665,666,1,0,0,0,666,668,1,0,0,0,667,663,1,0,0,0,668,671,
        1,0,0,0,669,667,1,0,0,0,669,670,1,0,0,0,670,107,1,0,0,0,671,669,
        1,0,0,0,672,679,5,22,0,0,673,675,3,170,85,0,674,673,1,0,0,0,674,
        675,1,0,0,0,675,676,1,0,0,0,676,678,5,15,0,0,677,674,1,0,0,0,678,
        681,1,0,0,0,679,677,1,0,0,0,679,680,1,0,0,0,680,683,1,0,0,0,681,
        679,1,0,0,0,682,684,3,170,85,0,683,682,1,0,0,0,683,684,1,0,0,0,684,
        685,1,0,0,0,685,686,5,23,0,0,686,109,1,0,0,0,687,689,5,52,0,0,688,
        690,5,113,0,0,689,688,1,0,0,0,689,690,1,0,0,0,690,701,1,0,0,0,691,
        701,5,53,0,0,692,701,5,54,0,0,693,701,5,51,0,0,694,701,5,93,0,0,
        695,701,5,94,0,0,696,701,5,55,0,0,697,701,5,95,0,0,698,701,5,96,
        0,0,699,701,5,97,0,0,700,687,1,0,0,0,700,691,1,0,0,0,700,692,1,0,
        0,0,700,693,1,0,0,0,700,694,1,0,0,0,700,695,1,0,0,0,700,696,1,0,
        0,0,700,697,1,0,0,0,700,698,1,0,0,0,700,699,1,0,0,0,701,111,1,0,
        0,0,702,703,6,56,-1,0,703,704,5,58,0,0,704,726,3,60,30,0,705,706,
        5,113,0,0,706,707,5,22,0,0,707,708,3,112,56,0,708,709,5,23,0,0,709,
        726,1,0,0,0,710,711,5,22,0,0,711,712,3,112,56,0,712,713,5,23,0,0,
        713,726,1,0,0,0,714,715,7,4,0,0,715,726,3,112,56,19,716,717,7,5,
        0,0,717,726,3,112,56,18,718,719,7,6,0,0,719,726,3,112,56,17,720,
        721,5,64,0,0,721,726,3,112,56,16,722,723,5,4,0,0,723,726,3,112,56,
        15,724,726,3,114,57,0,725,702,1,0,0,0,725,705,1,0,0,0,725,710,1,
        0,0,0,725,714,1,0,0,0,725,716,1,0,0,0,725,718,1,0,0,0,725,720,1,
        0,0,0,725,722,1,0,0,0,725,724,1,0,0,0,726,802,1,0,0,0,727,728,10,
        14,0,0,728,729,5,65,0,0,729,801,3,112,56,15,730,731,10,13,0,0,731,
        732,7,7,0,0,732,801,3,112,56,14,733,734,10,12,0,0,734,735,7,5,0,
        0,735,801,3,112,56,13,736,737,10,11,0,0,737,738,7,8,0,0,738,801,
        3,112,56,12,739,740,10,10,0,0,740,741,5,70,0,0,741,801,3,112,56,
        11,742,743,10,9,0,0,743,744,5,3,0,0,744,801,3,112,56,10,745,746,
        10,8,0,0,746,747,5,71,0,0,747,801,3,112,56,9,748,749,10,7,0,0,749,
        750,7,9,0,0,750,801,3,112,56,8,751,752,10,6,0,0,752,753,7,10,0,0,
        753,801,3,112,56,7,754,755,10,5,0,0,755,756,5,74,0,0,756,801,3,112,
        56,6,757,758,10,4,0,0,758,759,5,75,0,0,759,801,3,112,56,5,760,761,
        10,3,0,0,761,762,5,76,0,0,762,763,3,112,56,0,763,764,5,59,0,0,764,
        765,3,112,56,4,765,801,1,0,0,0,766,767,10,2,0,0,767,768,7,11,0,0,
        768,801,3,112,56,3,769,770,10,28,0,0,770,801,7,4,0,0,771,772,10,
        26,0,0,772,774,5,33,0,0,773,775,3,112,56,0,774,773,1,0,0,0,774,775,
        1,0,0,0,775,776,1,0,0,0,776,801,5,34,0,0,777,778,10,25,0,0,778,780,
        5,33,0,0,779,781,3,112,56,0,780,779,1,0,0,0,780,781,1,0,0,0,781,
        782,1,0,0,0,782,784,5,59,0,0,783,785,3,112,56,0,784,783,1,0,0,0,
        784,785,1,0,0,0,785,786,1,0,0,0,786,801,5,34,0,0,787,788,10,24,0,
        0,788,789,5,35,0,0,789,801,3,170,85,0,790,791,10,23,0,0,791,792,
        5,14,0,0,792,793,3,118,59,0,793,794,5,16,0,0,794,801,1,0,0,0,795,
        796,10,22,0,0,796,797,5,22,0,0,797,798,3,122,61,0,798,799,5,23,0,
        0,799,801,1,0,0,0,800,727,1,0,0,0,800,730,1,0,0,0,800,733,1,0,0,
        0,800,736,1,0,0,0,800,739,1,0,0,0,800,742,1,0,0,0,800,745,1,0,0,
        0,800,748,1,0,0,0,800,751,1,0,0,0,800,754,1,0,0,0,800,757,1,0,0,
        0,800,760,1,0,0,0,800,766,1,0,0,0,800,769,1,0,0,0,800,771,1,0,0,
        0,800,777,1,0,0,0,800,787,1,0,0,0,800,790,1,0,0,0,800,795,1,0,0,
        0,801,804,1,0,0,0,802,800,1,0,0,0,802,803,1,0,0,0,803,113,1,0,0,
        0,804,802,1,0,0,0,805,822,5,98,0,0,806,822,3,168,84,0,807,822,3,
        172,86,0,808,822,3,174,87,0,809,812,3,170,85,0,810,811,5,33,0,0,
        811,813,5,34,0,0,812,810,1,0,0,0,812,813,1,0,0,0,813,822,1,0,0,0,
        814,822,5,118,0,0,815,822,3,126,63,0,816,819,3,128,64,0,817,818,
        5,33,0,0,818,820,5,34,0,0,819,817,1,0,0,0,819,820,1,0,0,0,820,822,
        1,0,0,0,821,805,1,0,0,0,821,806,1,0,0,0,821,807,1,0,0,0,821,808,
        1,0,0,0,821,809,1,0,0,0,821,814,1,0,0,0,821,815,1,0,0,0,821,816,
        1,0,0,0,822,115,1,0,0,0,823,828,3,112,56,0,824,825,5,15,0,0,825,
        827,3,112,56,0,826,824,1,0,0,0,827,830,1,0,0,0,828,826,1,0,0,0,828,
        829,1,0,0,0,829,117,1,0,0,0,830,828,1,0,0,0,831,836,3,120,60,0,832,
        833,5,15,0,0,833,835,3,120,60,0,834,832,1,0,0,0,835,838,1,0,0,0,
        836,834,1,0,0,0,836,837,1,0,0,0,837,840,1,0,0,0,838,836,1,0,0,0,
        839,841,5,15,0,0,840,839,1,0,0,0,840,841,1,0,0,0,841,119,1,0,0,0,
        842,843,3,170,85,0,843,844,5,59,0,0,844,845,3,112,56,0,845,121,1,
        0,0,0,846,848,5,14,0,0,847,849,3,118,59,0,848,847,1,0,0,0,848,849,
        1,0,0,0,849,850,1,0,0,0,850,855,5,16,0,0,851,853,3,116,58,0,852,
        851,1,0,0,0,852,853,1,0,0,0,853,855,1,0,0,0,854,846,1,0,0,0,854,
        852,1,0,0,0,855,123,1,0,0,0,856,857,3,112,56,0,857,858,5,22,0,0,
        858,859,3,122,61,0,859,860,5,23,0,0,860,125,1,0,0,0,861,863,5,22,
        0,0,862,864,3,112,56,0,863,862,1,0,0,0,863,864,1,0,0,0,864,871,1,
        0,0,0,865,867,5,15,0,0,866,868,3,112,56,0,867,866,1,0,0,0,867,868,
        1,0,0,0,868,870,1,0,0,0,869,865,1,0,0,0,870,873,1,0,0,0,871,869,
        1,0,0,0,871,872,1,0,0,0,872,874,1,0,0,0,873,871,1,0,0,0,874,888,
        5,23,0,0,875,884,5,33,0,0,876,881,3,112,56,0,877,878,5,15,0,0,878,
        880,3,112,56,0,879,877,1,0,0,0,880,883,1,0,0,0,881,879,1,0,0,0,881,
        882,1,0,0,0,882,885,1,0,0,0,883,881,1,0,0,0,884,876,1,0,0,0,884,
        885,1,0,0,0,885,886,1,0,0,0,886,888,5,34,0,0,887,861,1,0,0,0,887,
        875,1,0,0,0,888,127,1,0,0,0,889,892,3,110,55,0,890,892,3,62,31,0,
        891,889,1,0,0,0,891,890,1,0,0,0,892,129,1,0,0,0,893,912,3,170,85,
        0,894,912,3,132,66,0,895,912,3,134,67,0,896,912,3,138,69,0,897,912,
        3,140,70,0,898,912,3,144,72,0,899,912,3,146,73,0,900,912,3,148,74,
        0,901,912,3,152,76,0,902,912,3,156,78,0,903,912,3,158,79,0,904,912,
        5,105,0,0,905,912,5,108,0,0,906,912,5,109,0,0,907,912,3,166,83,0,
        908,912,3,168,84,0,909,912,3,174,87,0,910,912,3,172,86,0,911,893,
        1,0,0,0,911,894,1,0,0,0,911,895,1,0,0,0,911,896,1,0,0,0,911,897,
        1,0,0,0,911,898,1,0,0,0,911,899,1,0,0,0,911,900,1,0,0,0,911,901,
        1,0,0,0,911,902,1,0,0,0,911,903,1,0,0,0,911,904,1,0,0,0,911,905,
        1,0,0,0,911,906,1,0,0,0,911,907,1,0,0,0,911,908,1,0,0,0,911,909,
        1,0,0,0,911,910,1,0,0,0,912,131,1,0,0,0,913,917,5,14,0,0,914,916,
        3,130,65,0,915,914,1,0,0,0,916,919,1,0,0,0,917,915,1,0,0,0,917,918,
        1,0,0,0,918,920,1,0,0,0,919,917,1,0,0,0,920,921,5,16,0,0,921,133,
        1,0,0,0,922,925,3,136,68,0,923,925,3,160,80,0,924,922,1,0,0,0,924,
        923,1,0,0,0,925,135,1,0,0,0,926,931,5,48,0,0,927,931,5,52,0,0,928,
        931,5,55,0,0,929,931,3,170,85,0,930,926,1,0,0,0,930,927,1,0,0,0,
        930,928,1,0,0,0,930,929,1,0,0,0,931,944,1,0,0,0,932,934,5,22,0,0,
        933,935,3,134,67,0,934,933,1,0,0,0,934,935,1,0,0,0,935,940,1,0,0,
        0,936,937,5,15,0,0,937,939,3,134,67,0,938,936,1,0,0,0,939,942,1,
        0,0,0,940,938,1,0,0,0,940,941,1,0,0,0,941,943,1,0,0,0,942,940,1,
        0,0,0,943,945,5,23,0,0,944,932,1,0,0,0,944,945,1,0,0,0,945,137,1,
        0,0,0,946,947,5,87,0,0,947,950,3,142,71,0,948,949,5,88,0,0,949,951,
        3,134,67,0,950,948,1,0,0,0,950,951,1,0,0,0,951,139,1,0,0,0,952,953,
        3,142,71,0,953,954,5,88,0,0,954,955,3,134,67,0,955,141,1,0,0,0,956,
        961,3,170,85,0,957,958,5,15,0,0,958,960,3,170,85,0,959,957,1,0,0,
        0,960,963,1,0,0,0,961,959,1,0,0,0,961,962,1,0,0,0,962,143,1,0,0,
        0,963,961,1,0,0,0,964,965,5,89,0,0,965,966,3,170,85,0,966,145,1,
        0,0,0,967,968,3,170,85,0,968,969,5,59,0,0,969,147,1,0,0,0,970,971,
        5,90,0,0,971,975,3,134,67,0,972,974,3,150,75,0,973,972,1,0,0,0,974,
        977,1,0,0,0,975,973,1,0,0,0,975,976,1,0,0,0,976,149,1,0,0,0,977,
        975,1,0,0,0,978,979,5,91,0,0,979,981,3,160,80,0,980,982,3,164,82,
        0,981,980,1,0,0,0,981,982,1,0,0,0,982,983,1,0,0,0,983,984,3,132,
        66,0,984,988,1,0,0,0,985,986,5,92,0,0,986,988,3,132,66,0,987,978,
        1,0,0,0,987,985,1,0,0,0,988,151,1,0,0,0,989,990,5,29,0,0,990,991,
        3,170,85,0,991,993,5,22,0,0,992,994,3,162,81,0,993,992,1,0,0,0,993,
        994,1,0,0,0,994,995,1,0,0,0,995,997,5,23,0,0,996,998,3,154,77,0,
        997,996,1,0,0,0,997,998,1,0,0,0,998,999,1,0,0,0,999,1000,3,132,66,
        0,1000,153,1,0,0,0,1001,1002,5,61,0,0,1002,1003,5,6,0,0,1003,1004,
        3,162,81,0,1004,155,1,0,0,0,1005,1006,5,26,0,0,1006,1007,3,132,66,
        0,1007,1008,3,134,67,0,1008,1009,3,132,66,0,1009,1010,3,132,66,0,
        1010,157,1,0,0,0,1011,1012,5,41,0,0,1012,1013,3,134,67,0,1013,1014,
        3,132,66,0,1014,159,1,0,0,0,1015,1021,3,174,87,0,1016,1021,5,99,
        0,0,1017,1021,5,100,0,0,1018,1021,3,172,86,0,1019,1021,5,98,0,0,
        1020,1015,1,0,0,0,1020,1016,1,0,0,0,1020,1017,1,0,0,0,1020,1018,
        1,0,0,0,1020,1019,1,0,0,0,1021,1023,1,0,0,0,1022,1024,3,164,82,0,
        1023,1022,1,0,0,0,1023,1024,1,0,0,0,1024,161,1,0,0,0,1025,1027,3,
        170,85,0,1026,1028,3,164,82,0,1027,1026,1,0,0,0,1027,1028,1,0,0,
        0,1028,1031,1,0,0,0,1029,1030,5,15,0,0,1030,1032,3,162,81,0,1031,
        1029,1,0,0,0,1031,1032,1,0,0,0,1032,163,1,0,0,0,1033,1034,5,59,0,
        0,1034,1035,3,170,85,0,1035,165,1,0,0,0,1036,1037,5,46,0,0,1037,
        1038,3,170,85,0,1038,1039,3,132,66,0,1039,167,1,0,0,0,1040,1042,
        7,12,0,0,1041,1043,5,101,0,0,1042,1041,1,0,0,0,1042,1043,1,0,0,0,
        1043,169,1,0,0,0,1044,1045,7,13,0,0,1045,171,1,0,0,0,1046,1048,5,
        102,0,0,1047,1046,1,0,0,0,1048,1049,1,0,0,0,1049,1047,1,0,0,0,1049,
        1050,1,0,0,0,1050,173,1,0,0,0,1051,1053,5,124,0,0,1052,1051,1,0,
        0,0,1053,1054,1,0,0,0,1054,1052,1,0,0,0,1054,1055,1,0,0,0,1055,175,
        1,0,0,0,122,181,183,197,201,204,214,220,224,236,244,249,252,262,
        265,271,279,282,291,300,302,308,319,324,331,345,348,355,359,361,
        366,372,376,382,387,400,402,408,411,417,425,431,444,447,453,456,
        464,467,473,476,480,489,494,499,507,514,524,534,552,564,569,575,
        579,582,596,600,603,610,614,634,652,656,661,665,669,674,679,683,
        689,700,725,774,780,784,800,802,812,819,821,828,836,840,848,852,
        854,863,867,871,881,884,887,891,911,917,924,930,934,940,944,950,
        961,975,981,987,993,997,1020,1023,1027,1031,1042,1049,1054
    ]

class SolidityParser ( Parser ):

    grammarFileName = "Solidity.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'pragma'", "';'", "'^'", "'~'", "'>='", 
                     "'>'", "'<'", "'<='", "'='", "'import'", "'as'", "'*'", 
                     "'from'", "'{'", "','", "'}'", "'abstract'", "'contract'", 
                     "'interface'", "'library'", "'is'", "'('", "')'", "'override'", 
                     "'using'", "'for'", "'struct'", "'modifier'", "'function'", 
                     "'returns'", "'event'", "'enum'", "'['", "']'", "'.'", 
                     "'mapping'", "'=>'", "'memory'", "'storage'", "'calldata'", 
                     "'if'", "'else'", "'try'", "'catch'", "'while'", "'assembly'", 
                     "'do'", "'return'", "'throw'", "'emit'", "'var'", "'address'", 
                     "'bool'", "'string'", "'byte'", "'++'", "'--'", "'new'", 
                     "':'", "'+'", "'-'", "'after'", "'delete'", "'!'", 
                     "'**'", "'/'", "'%'", "'<<'", "'>>'", "'&'", "'|'", 
                     "'=='", "'!='", "'&&'", "'||'", "'?'", "'|='", "'^='", 
                     "'&='", "'<<='", "'>>='", "'+='", "'-='", "'*='", "'/='", 
                     "'%='", "'let'", "':='", "'=:'", "'switch'", "'case'", 
                     "'default'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'anonymous'", "'break'", "'constant'", "'immutable'", 
                     "'continue'", "'leave'", "'external'", "'indexed'", 
                     "'internal'", "'payable'", "'private'", "'public'", 
                     "'virtual'", "'pure'", "'type'", "'view'", "'constructor'", 
                     "'fallback'", "'receive'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "Int", "Uint", "Byte", "Fixed", "Ufixed", 
                      "BooleanLiteral", "DecimalNumber", "HexNumber", "NumberUnit", 
                      "HexLiteralFragment", "ReservedKeyword", "AnonymousKeyword", 
                      "BreakKeyword", "ConstantKeyword", "ImmutableKeyword", 
                      "ContinueKeyword", "LeaveKeyword", "ExternalKeyword", 
                      "IndexedKeyword", "InternalKeyword", "PayableKeyword", 
                      "PrivateKeyword", "PublicKeyword", "VirtualKeyword", 
                      "PureKeyword", "TypeKeyword", "ViewKeyword", "ConstructorKeyword", 
                      "FallbackKeyword", "ReceiveKeyword", "Identifier", 
                      "StringLiteralFragment", "VersionLiteral", "WS", "COMMENT", 
                      "LINE_COMMENT" ]

    RULE_sourceUnit = 0
    RULE_pragmaDirective = 1
    RULE_pragmaName = 2
    RULE_pragmaValue = 3
    RULE_version = 4
    RULE_versionConstraint = 5
    RULE_versionOperator = 6
    RULE_importDirective = 7
    RULE_importDeclaration = 8
    RULE_contractDefinition = 9
    RULE_inheritanceSpecifier = 10
    RULE_contractPart = 11
    RULE_stateVariableDeclaration = 12
    RULE_overrideSpecifier = 13
    RULE_usingForDeclaration = 14
    RULE_structDefinition = 15
    RULE_modifierDefinition = 16
    RULE_functionDefinition = 17
    RULE_functionDescriptor = 18
    RULE_returnParameters = 19
    RULE_modifierList = 20
    RULE_modifierInvocation = 21
    RULE_eventDefinition = 22
    RULE_enumDefinition = 23
    RULE_enumValue = 24
    RULE_parameterList = 25
    RULE_parameter = 26
    RULE_eventParameterList = 27
    RULE_eventParameter = 28
    RULE_variableDeclaration = 29
    RULE_typeName = 30
    RULE_userDefinedTypeName = 31
    RULE_mapping = 32
    RULE_functionTypeName = 33
    RULE_storageLocation = 34
    RULE_stateMutability = 35
    RULE_block = 36
    RULE_statement = 37
    RULE_expressionStatement = 38
    RULE_ifStatement = 39
    RULE_tryStatement = 40
    RULE_catchClause = 41
    RULE_whileStatement = 42
    RULE_forStatement = 43
    RULE_simpleStatement = 44
    RULE_inlineAssemblyStatement = 45
    RULE_doWhileStatement = 46
    RULE_continueStatement = 47
    RULE_breakStatement = 48
    RULE_returnStatement = 49
    RULE_throwStatement = 50
    RULE_emitStatement = 51
    RULE_variableDeclarationStatement = 52
    RULE_variableDeclarationList = 53
    RULE_identifierList = 54
    RULE_elementaryTypeName = 55
    RULE_expression = 56
    RULE_primaryExpression = 57
    RULE_expressionList = 58
    RULE_nameValueList = 59
    RULE_nameValue = 60
    RULE_functionCallArguments = 61
    RULE_functionCall = 62
    RULE_tupleExpression = 63
    RULE_typeNameExpression = 64
    RULE_assemblyItem = 65
    RULE_assemblyBlock = 66
    RULE_assemblyExpression = 67
    RULE_assemblyCall = 68
    RULE_assemblyLocalDefinition = 69
    RULE_assemblyAssignment = 70
    RULE_assemblyIdentifierList = 71
    RULE_assemblyStackAssignment = 72
    RULE_labelDefinition = 73
    RULE_assemblySwitch = 74
    RULE_assemblyCase = 75
    RULE_assemblyFunctionDefinition = 76
    RULE_assemblyFunctionReturns = 77
    RULE_assemblyFor = 78
    RULE_assemblyIf = 79
    RULE_assemblyLiteral = 80
    RULE_assemblyTypedVariableList = 81
    RULE_assemblyType = 82
    RULE_subAssembly = 83
    RULE_numberLiteral = 84
    RULE_identifier = 85
    RULE_hexLiteral = 86
    RULE_stringLiteral = 87

    ruleNames =  [ "sourceUnit", "pragmaDirective", "pragmaName", "pragmaValue", 
                   "version", "versionConstraint", "versionOperator", "importDirective", 
                   "importDeclaration", "contractDefinition", "inheritanceSpecifier", 
                   "contractPart", "stateVariableDeclaration", "overrideSpecifier", 
                   "usingForDeclaration", "structDefinition", "modifierDefinition", 
                   "functionDefinition", "functionDescriptor", "returnParameters", 
                   "modifierList", "modifierInvocation", "eventDefinition", 
                   "enumDefinition", "enumValue", "parameterList", "parameter", 
                   "eventParameterList", "eventParameter", "variableDeclaration", 
                   "typeName", "userDefinedTypeName", "mapping", "functionTypeName", 
                   "storageLocation", "stateMutability", "block", "statement", 
                   "expressionStatement", "ifStatement", "tryStatement", 
                   "catchClause", "whileStatement", "forStatement", "simpleStatement", 
                   "inlineAssemblyStatement", "doWhileStatement", "continueStatement", 
                   "breakStatement", "returnStatement", "throwStatement", 
                   "emitStatement", "variableDeclarationStatement", "variableDeclarationList", 
                   "identifierList", "elementaryTypeName", "expression", 
                   "primaryExpression", "expressionList", "nameValueList", 
                   "nameValue", "functionCallArguments", "functionCall", 
                   "tupleExpression", "typeNameExpression", "assemblyItem", 
                   "assemblyBlock", "assemblyExpression", "assemblyCall", 
                   "assemblyLocalDefinition", "assemblyAssignment", "assemblyIdentifierList", 
                   "assemblyStackAssignment", "labelDefinition", "assemblySwitch", 
                   "assemblyCase", "assemblyFunctionDefinition", "assemblyFunctionReturns", 
                   "assemblyFor", "assemblyIf", "assemblyLiteral", "assemblyTypedVariableList", 
                   "assemblyType", "subAssembly", "numberLiteral", "identifier", 
                   "hexLiteral", "stringLiteral" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    T__73=74
    T__74=75
    T__75=76
    T__76=77
    T__77=78
    T__78=79
    T__79=80
    T__80=81
    T__81=82
    T__82=83
    T__83=84
    T__84=85
    T__85=86
    T__86=87
    T__87=88
    T__88=89
    T__89=90
    T__90=91
    T__91=92
    Int=93
    Uint=94
    Byte=95
    Fixed=96
    Ufixed=97
    BooleanLiteral=98
    DecimalNumber=99
    HexNumber=100
    NumberUnit=101
    HexLiteralFragment=102
    ReservedKeyword=103
    AnonymousKeyword=104
    BreakKeyword=105
    ConstantKeyword=106
    ImmutableKeyword=107
    ContinueKeyword=108
    LeaveKeyword=109
    ExternalKeyword=110
    IndexedKeyword=111
    InternalKeyword=112
    PayableKeyword=113
    PrivateKeyword=114
    PublicKeyword=115
    VirtualKeyword=116
    PureKeyword=117
    TypeKeyword=118
    ViewKeyword=119
    ConstructorKeyword=120
    FallbackKeyword=121
    ReceiveKeyword=122
    Identifier=123
    StringLiteralFragment=124
    VersionLiteral=125
    WS=126
    COMMENT=127
    LINE_COMMENT=128

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class SourceUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(SolidityParser.EOF, 0)

        def pragmaDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.PragmaDirectiveContext)
            else:
                return self.getTypedRuleContext(SolidityParser.PragmaDirectiveContext,i)


        def importDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ImportDirectiveContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ImportDirectiveContext,i)


        def structDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StructDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StructDefinitionContext,i)


        def enumDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.EnumDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.EnumDefinitionContext,i)


        def contractDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ContractDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ContractDefinitionContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_sourceUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSourceUnit" ):
                listener.enterSourceUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSourceUnit" ):
                listener.exitSourceUnit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSourceUnit" ):
                return visitor.visitSourceUnit(self)
            else:
                return visitor.visitChildren(self)




    def sourceUnit(self):

        localctx = SolidityParser.SourceUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_sourceUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 183
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__0) | (1 << SolidityParser.T__9) | (1 << SolidityParser.T__16) | (1 << SolidityParser.T__17) | (1 << SolidityParser.T__18) | (1 << SolidityParser.T__19) | (1 << SolidityParser.T__26) | (1 << SolidityParser.T__31))) != 0):
                self.state = 181
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SolidityParser.T__0]:
                    self.state = 176
                    self.pragmaDirective()
                    pass
                elif token in [SolidityParser.T__9]:
                    self.state = 177
                    self.importDirective()
                    pass
                elif token in [SolidityParser.T__26]:
                    self.state = 178
                    self.structDefinition()
                    pass
                elif token in [SolidityParser.T__31]:
                    self.state = 179
                    self.enumDefinition()
                    pass
                elif token in [SolidityParser.T__16, SolidityParser.T__17, SolidityParser.T__18, SolidityParser.T__19]:
                    self.state = 180
                    self.contractDefinition()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 185
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 186
            self.match(SolidityParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pragmaName(self):
            return self.getTypedRuleContext(SolidityParser.PragmaNameContext,0)


        def pragmaValue(self):
            return self.getTypedRuleContext(SolidityParser.PragmaValueContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_pragmaDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmaDirective" ):
                listener.enterPragmaDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmaDirective" ):
                listener.exitPragmaDirective(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPragmaDirective" ):
                return visitor.visitPragmaDirective(self)
            else:
                return visitor.visitChildren(self)




    def pragmaDirective(self):

        localctx = SolidityParser.PragmaDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_pragmaDirective)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 188
            self.match(SolidityParser.T__0)
            self.state = 189
            self.pragmaName()
            self.state = 190
            self.pragmaValue()
            self.state = 191
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_pragmaName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmaName" ):
                listener.enterPragmaName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmaName" ):
                listener.exitPragmaName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPragmaName" ):
                return visitor.visitPragmaName(self)
            else:
                return visitor.visitChildren(self)




    def pragmaName(self):

        localctx = SolidityParser.PragmaNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_pragmaName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 193
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def version(self):
            return self.getTypedRuleContext(SolidityParser.VersionContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_pragmaValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmaValue" ):
                listener.enterPragmaValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmaValue" ):
                listener.exitPragmaValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPragmaValue" ):
                return visitor.visitPragmaValue(self)
            else:
                return visitor.visitChildren(self)




    def pragmaValue(self):

        localctx = SolidityParser.PragmaValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_pragmaValue)
        try:
            self.state = 197
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 195
                self.version()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 196
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VersionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def versionConstraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.VersionConstraintContext)
            else:
                return self.getTypedRuleContext(SolidityParser.VersionConstraintContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_version

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersion" ):
                listener.enterVersion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersion" ):
                listener.exitVersion(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVersion" ):
                return visitor.visitVersion(self)
            else:
                return visitor.visitChildren(self)




    def version(self):

        localctx = SolidityParser.VersionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_version)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 199
            self.versionConstraint()
            self.state = 201
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__2) | (1 << SolidityParser.T__3) | (1 << SolidityParser.T__4) | (1 << SolidityParser.T__5) | (1 << SolidityParser.T__6) | (1 << SolidityParser.T__7) | (1 << SolidityParser.T__8))) != 0) or _la==SolidityParser.VersionLiteral:
                self.state = 200
                self.versionConstraint()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VersionConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VersionLiteral(self):
            return self.getToken(SolidityParser.VersionLiteral, 0)

        def versionOperator(self):
            return self.getTypedRuleContext(SolidityParser.VersionOperatorContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_versionConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersionConstraint" ):
                listener.enterVersionConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersionConstraint" ):
                listener.exitVersionConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVersionConstraint" ):
                return visitor.visitVersionConstraint(self)
            else:
                return visitor.visitChildren(self)




    def versionConstraint(self):

        localctx = SolidityParser.VersionConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_versionConstraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 204
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__2) | (1 << SolidityParser.T__3) | (1 << SolidityParser.T__4) | (1 << SolidityParser.T__5) | (1 << SolidityParser.T__6) | (1 << SolidityParser.T__7) | (1 << SolidityParser.T__8))) != 0):
                self.state = 203
                self.versionOperator()


            self.state = 206
            self.match(SolidityParser.VersionLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VersionOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SolidityParser.RULE_versionOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersionOperator" ):
                listener.enterVersionOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersionOperator" ):
                listener.exitVersionOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVersionOperator" ):
                return visitor.visitVersionOperator(self)
            else:
                return visitor.visitChildren(self)




    def versionOperator(self):

        localctx = SolidityParser.VersionOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_versionOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 208
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__2) | (1 << SolidityParser.T__3) | (1 << SolidityParser.T__4) | (1 << SolidityParser.T__5) | (1 << SolidityParser.T__6) | (1 << SolidityParser.T__7) | (1 << SolidityParser.T__8))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteralFragment(self):
            return self.getToken(SolidityParser.StringLiteralFragment, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def importDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ImportDeclarationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ImportDeclarationContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_importDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportDirective" ):
                listener.enterImportDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportDirective" ):
                listener.exitImportDirective(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportDirective" ):
                return visitor.visitImportDirective(self)
            else:
                return visitor.visitChildren(self)




    def importDirective(self):

        localctx = SolidityParser.ImportDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_importDirective)
        self._la = 0 # Token type
        try:
            self.state = 244
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 210
                self.match(SolidityParser.T__9)
                self.state = 211
                self.match(SolidityParser.StringLiteralFragment)
                self.state = 214
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SolidityParser.T__10:
                    self.state = 212
                    self.match(SolidityParser.T__10)
                    self.state = 213
                    self.identifier()


                self.state = 216
                self.match(SolidityParser.T__1)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 217
                self.match(SolidityParser.T__9)
                self.state = 220
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SolidityParser.T__11]:
                    self.state = 218
                    self.match(SolidityParser.T__11)
                    pass
                elif token in [SolidityParser.T__12, SolidityParser.T__39, SolidityParser.T__51, SolidityParser.Identifier]:
                    self.state = 219
                    self.identifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 224
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SolidityParser.T__10:
                    self.state = 222
                    self.match(SolidityParser.T__10)
                    self.state = 223
                    self.identifier()


                self.state = 226
                self.match(SolidityParser.T__12)
                self.state = 227
                self.match(SolidityParser.StringLiteralFragment)
                self.state = 228
                self.match(SolidityParser.T__1)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 229
                self.match(SolidityParser.T__9)
                self.state = 230
                self.match(SolidityParser.T__13)
                self.state = 231
                self.importDeclaration()
                self.state = 236
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SolidityParser.T__14:
                    self.state = 232
                    self.match(SolidityParser.T__14)
                    self.state = 233
                    self.importDeclaration()
                    self.state = 238
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 239
                self.match(SolidityParser.T__15)
                self.state = 240
                self.match(SolidityParser.T__12)
                self.state = 241
                self.match(SolidityParser.StringLiteralFragment)
                self.state = 242
                self.match(SolidityParser.T__1)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_importDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportDeclaration" ):
                listener.enterImportDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportDeclaration" ):
                listener.exitImportDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportDeclaration" ):
                return visitor.visitImportDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def importDeclaration(self):

        localctx = SolidityParser.ImportDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_importDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 246
            self.identifier()
            self.state = 249
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__10:
                self.state = 247
                self.match(SolidityParser.T__10)
                self.state = 248
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContractDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def inheritanceSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.InheritanceSpecifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.InheritanceSpecifierContext,i)


        def contractPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ContractPartContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ContractPartContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_contractDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContractDefinition" ):
                listener.enterContractDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContractDefinition" ):
                listener.exitContractDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContractDefinition" ):
                return visitor.visitContractDefinition(self)
            else:
                return visitor.visitChildren(self)




    def contractDefinition(self):

        localctx = SolidityParser.ContractDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_contractDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 252
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__16:
                self.state = 251
                self.match(SolidityParser.T__16)


            self.state = 254
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__17) | (1 << SolidityParser.T__18) | (1 << SolidityParser.T__19))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 255
            self.identifier()
            self.state = 265
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__20:
                self.state = 256
                self.match(SolidityParser.T__20)
                self.state = 257
                self.inheritanceSpecifier()
                self.state = 262
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SolidityParser.T__14:
                    self.state = 258
                    self.match(SolidityParser.T__14)
                    self.state = 259
                    self.inheritanceSpecifier()
                    self.state = 264
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 267
            self.match(SolidityParser.T__13)
            self.state = 271
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__12) | (1 << SolidityParser.T__24) | (1 << SolidityParser.T__26) | (1 << SolidityParser.T__27) | (1 << SolidityParser.T__28) | (1 << SolidityParser.T__30) | (1 << SolidityParser.T__31) | (1 << SolidityParser.T__35) | (1 << SolidityParser.T__39) | (1 << SolidityParser.T__50) | (1 << SolidityParser.T__51) | (1 << SolidityParser.T__52) | (1 << SolidityParser.T__53) | (1 << SolidityParser.T__54))) != 0) or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (SolidityParser.Int - 93)) | (1 << (SolidityParser.Uint - 93)) | (1 << (SolidityParser.Byte - 93)) | (1 << (SolidityParser.Fixed - 93)) | (1 << (SolidityParser.Ufixed - 93)) | (1 << (SolidityParser.ConstructorKeyword - 93)) | (1 << (SolidityParser.FallbackKeyword - 93)) | (1 << (SolidityParser.ReceiveKeyword - 93)) | (1 << (SolidityParser.Identifier - 93)))) != 0):
                self.state = 268
                self.contractPart()
                self.state = 273
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 274
            self.match(SolidityParser.T__15)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InheritanceSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def userDefinedTypeName(self):
            return self.getTypedRuleContext(SolidityParser.UserDefinedTypeNameContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_inheritanceSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInheritanceSpecifier" ):
                listener.enterInheritanceSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInheritanceSpecifier" ):
                listener.exitInheritanceSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInheritanceSpecifier" ):
                return visitor.visitInheritanceSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def inheritanceSpecifier(self):

        localctx = SolidityParser.InheritanceSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_inheritanceSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 276
            self.userDefinedTypeName()
            self.state = 282
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__21:
                self.state = 277
                self.match(SolidityParser.T__21)
                self.state = 279
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__3) | (1 << SolidityParser.T__12) | (1 << SolidityParser.T__21) | (1 << SolidityParser.T__32) | (1 << SolidityParser.T__39) | (1 << SolidityParser.T__50) | (1 << SolidityParser.T__51) | (1 << SolidityParser.T__52) | (1 << SolidityParser.T__53) | (1 << SolidityParser.T__54) | (1 << SolidityParser.T__55) | (1 << SolidityParser.T__56) | (1 << SolidityParser.T__57) | (1 << SolidityParser.T__59) | (1 << SolidityParser.T__60) | (1 << SolidityParser.T__61) | (1 << SolidityParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SolidityParser.T__63 - 64)) | (1 << (SolidityParser.Int - 64)) | (1 << (SolidityParser.Uint - 64)) | (1 << (SolidityParser.Byte - 64)) | (1 << (SolidityParser.Fixed - 64)) | (1 << (SolidityParser.Ufixed - 64)) | (1 << (SolidityParser.BooleanLiteral - 64)) | (1 << (SolidityParser.DecimalNumber - 64)) | (1 << (SolidityParser.HexNumber - 64)) | (1 << (SolidityParser.HexLiteralFragment - 64)) | (1 << (SolidityParser.PayableKeyword - 64)) | (1 << (SolidityParser.TypeKeyword - 64)) | (1 << (SolidityParser.Identifier - 64)) | (1 << (SolidityParser.StringLiteralFragment - 64)))) != 0):
                    self.state = 278
                    self.expressionList()


                self.state = 281
                self.match(SolidityParser.T__22)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContractPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stateVariableDeclaration(self):
            return self.getTypedRuleContext(SolidityParser.StateVariableDeclarationContext,0)


        def usingForDeclaration(self):
            return self.getTypedRuleContext(SolidityParser.UsingForDeclarationContext,0)


        def structDefinition(self):
            return self.getTypedRuleContext(SolidityParser.StructDefinitionContext,0)


        def modifierDefinition(self):
            return self.getTypedRuleContext(SolidityParser.ModifierDefinitionContext,0)


        def functionDefinition(self):
            return self.getTypedRuleContext(SolidityParser.FunctionDefinitionContext,0)


        def eventDefinition(self):
            return self.getTypedRuleContext(SolidityParser.EventDefinitionContext,0)


        def enumDefinition(self):
            return self.getTypedRuleContext(SolidityParser.EnumDefinitionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_contractPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContractPart" ):
                listener.enterContractPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContractPart" ):
                listener.exitContractPart(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContractPart" ):
                return visitor.visitContractPart(self)
            else:
                return visitor.visitChildren(self)




    def contractPart(self):

        localctx = SolidityParser.ContractPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_contractPart)
        try:
            self.state = 291
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 284
                self.stateVariableDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 285
                self.usingForDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 286
                self.structDefinition()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 287
                self.modifierDefinition()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 288
                self.functionDefinition()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 289
                self.eventDefinition()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 290
                self.enumDefinition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StateVariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def PublicKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.PublicKeyword)
            else:
                return self.getToken(SolidityParser.PublicKeyword, i)

        def InternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.InternalKeyword)
            else:
                return self.getToken(SolidityParser.InternalKeyword, i)

        def PrivateKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.PrivateKeyword)
            else:
                return self.getToken(SolidityParser.PrivateKeyword, i)

        def ConstantKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.ConstantKeyword)
            else:
                return self.getToken(SolidityParser.ConstantKeyword, i)

        def ImmutableKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.ImmutableKeyword)
            else:
                return self.getToken(SolidityParser.ImmutableKeyword, i)

        def overrideSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.OverrideSpecifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.OverrideSpecifierContext,i)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_stateVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStateVariableDeclaration" ):
                listener.enterStateVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStateVariableDeclaration" ):
                listener.exitStateVariableDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStateVariableDeclaration" ):
                return visitor.visitStateVariableDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def stateVariableDeclaration(self):

        localctx = SolidityParser.StateVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_stateVariableDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 293
            self.typeName(0)
            self.state = 302
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SolidityParser.T__23 or ((((_la - 106)) & ~0x3f) == 0 and ((1 << (_la - 106)) & ((1 << (SolidityParser.ConstantKeyword - 106)) | (1 << (SolidityParser.ImmutableKeyword - 106)) | (1 << (SolidityParser.InternalKeyword - 106)) | (1 << (SolidityParser.PrivateKeyword - 106)) | (1 << (SolidityParser.PublicKeyword - 106)))) != 0):
                self.state = 300
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SolidityParser.PublicKeyword]:
                    self.state = 294
                    self.match(SolidityParser.PublicKeyword)
                    pass
                elif token in [SolidityParser.InternalKeyword]:
                    self.state = 295
                    self.match(SolidityParser.InternalKeyword)
                    pass
                elif token in [SolidityParser.PrivateKeyword]:
                    self.state = 296
                    self.match(SolidityParser.PrivateKeyword)
                    pass
                elif token in [SolidityParser.ConstantKeyword]:
                    self.state = 297
                    self.match(SolidityParser.ConstantKeyword)
                    pass
                elif token in [SolidityParser.ImmutableKeyword]:
                    self.state = 298
                    self.match(SolidityParser.ImmutableKeyword)
                    pass
                elif token in [SolidityParser.T__23]:
                    self.state = 299
                    self.overrideSpecifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 304
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 305
            self.identifier()
            self.state = 308
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__8:
                self.state = 306
                self.match(SolidityParser.T__8)
                self.state = 307
                self.expression(0)


            self.state = 310
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OverrideSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def userDefinedTypeName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.UserDefinedTypeNameContext)
            else:
                return self.getTypedRuleContext(SolidityParser.UserDefinedTypeNameContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_overrideSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOverrideSpecifier" ):
                listener.enterOverrideSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOverrideSpecifier" ):
                listener.exitOverrideSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOverrideSpecifier" ):
                return visitor.visitOverrideSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def overrideSpecifier(self):

        localctx = SolidityParser.OverrideSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_overrideSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 312
            self.match(SolidityParser.T__23)
            self.state = 324
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.state = 313
                self.match(SolidityParser.T__21)
                self.state = 314
                self.userDefinedTypeName()
                self.state = 319
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SolidityParser.T__14:
                    self.state = 315
                    self.match(SolidityParser.T__14)
                    self.state = 316
                    self.userDefinedTypeName()
                    self.state = 321
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 322
                self.match(SolidityParser.T__22)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UsingForDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_usingForDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingForDeclaration" ):
                listener.enterUsingForDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingForDeclaration" ):
                listener.exitUsingForDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUsingForDeclaration" ):
                return visitor.visitUsingForDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def usingForDeclaration(self):

        localctx = SolidityParser.UsingForDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_usingForDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 326
            self.match(SolidityParser.T__24)
            self.state = 327
            self.identifier()
            self.state = 328
            self.match(SolidityParser.T__25)
            self.state = 331
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__11]:
                self.state = 329
                self.match(SolidityParser.T__11)
                pass
            elif token in [SolidityParser.T__12, SolidityParser.T__28, SolidityParser.T__35, SolidityParser.T__39, SolidityParser.T__50, SolidityParser.T__51, SolidityParser.T__52, SolidityParser.T__53, SolidityParser.T__54, SolidityParser.Int, SolidityParser.Uint, SolidityParser.Byte, SolidityParser.Fixed, SolidityParser.Ufixed, SolidityParser.Identifier]:
                self.state = 330
                self.typeName(0)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 333
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def variableDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.VariableDeclarationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.VariableDeclarationContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_structDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDefinition" ):
                listener.enterStructDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDefinition" ):
                listener.exitStructDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructDefinition" ):
                return visitor.visitStructDefinition(self)
            else:
                return visitor.visitChildren(self)




    def structDefinition(self):

        localctx = SolidityParser.StructDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_structDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 335
            self.match(SolidityParser.T__26)
            self.state = 336
            self.identifier()
            self.state = 337
            self.match(SolidityParser.T__13)
            self.state = 348
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__12) | (1 << SolidityParser.T__28) | (1 << SolidityParser.T__35) | (1 << SolidityParser.T__39) | (1 << SolidityParser.T__50) | (1 << SolidityParser.T__51) | (1 << SolidityParser.T__52) | (1 << SolidityParser.T__53) | (1 << SolidityParser.T__54))) != 0) or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (SolidityParser.Int - 93)) | (1 << (SolidityParser.Uint - 93)) | (1 << (SolidityParser.Byte - 93)) | (1 << (SolidityParser.Fixed - 93)) | (1 << (SolidityParser.Ufixed - 93)) | (1 << (SolidityParser.Identifier - 93)))) != 0):
                self.state = 338
                self.variableDeclaration()
                self.state = 339
                self.match(SolidityParser.T__1)
                self.state = 345
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__12) | (1 << SolidityParser.T__28) | (1 << SolidityParser.T__35) | (1 << SolidityParser.T__39) | (1 << SolidityParser.T__50) | (1 << SolidityParser.T__51) | (1 << SolidityParser.T__52) | (1 << SolidityParser.T__53) | (1 << SolidityParser.T__54))) != 0) or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (SolidityParser.Int - 93)) | (1 << (SolidityParser.Uint - 93)) | (1 << (SolidityParser.Byte - 93)) | (1 << (SolidityParser.Fixed - 93)) | (1 << (SolidityParser.Ufixed - 93)) | (1 << (SolidityParser.Identifier - 93)))) != 0):
                    self.state = 340
                    self.variableDeclaration()
                    self.state = 341
                    self.match(SolidityParser.T__1)
                    self.state = 347
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 350
            self.match(SolidityParser.T__15)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def VirtualKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.VirtualKeyword)
            else:
                return self.getToken(SolidityParser.VirtualKeyword, i)

        def overrideSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.OverrideSpecifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.OverrideSpecifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_modifierDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifierDefinition" ):
                listener.enterModifierDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifierDefinition" ):
                listener.exitModifierDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModifierDefinition" ):
                return visitor.visitModifierDefinition(self)
            else:
                return visitor.visitChildren(self)




    def modifierDefinition(self):

        localctx = SolidityParser.ModifierDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_modifierDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 352
            self.match(SolidityParser.T__27)
            self.state = 353
            self.identifier()
            self.state = 355
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__21:
                self.state = 354
                self.parameterList()


            self.state = 361
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SolidityParser.T__23 or _la==SolidityParser.VirtualKeyword:
                self.state = 359
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SolidityParser.VirtualKeyword]:
                    self.state = 357
                    self.match(SolidityParser.VirtualKeyword)
                    pass
                elif token in [SolidityParser.T__23]:
                    self.state = 358
                    self.overrideSpecifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 363
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 366
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__1]:
                self.state = 364
                self.match(SolidityParser.T__1)
                pass
            elif token in [SolidityParser.T__13]:
                self.state = 365
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionDescriptor(self):
            return self.getTypedRuleContext(SolidityParser.FunctionDescriptorContext,0)


        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def modifierList(self):
            return self.getTypedRuleContext(SolidityParser.ModifierListContext,0)


        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def returnParameters(self):
            return self.getTypedRuleContext(SolidityParser.ReturnParametersContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDefinition" ):
                listener.enterFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDefinition" ):
                listener.exitFunctionDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionDefinition" ):
                return visitor.visitFunctionDefinition(self)
            else:
                return visitor.visitChildren(self)




    def functionDefinition(self):

        localctx = SolidityParser.FunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_functionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 368
            self.functionDescriptor()
            self.state = 369
            self.parameterList()
            self.state = 370
            self.modifierList()
            self.state = 372
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__29:
                self.state = 371
                self.returnParameters()


            self.state = 376
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__1]:
                self.state = 374
                self.match(SolidityParser.T__1)
                pass
            elif token in [SolidityParser.T__13]:
                self.state = 375
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDescriptorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def ReceiveKeyword(self):
            return self.getToken(SolidityParser.ReceiveKeyword, 0)

        def FallbackKeyword(self):
            return self.getToken(SolidityParser.FallbackKeyword, 0)

        def ConstructorKeyword(self):
            return self.getToken(SolidityParser.ConstructorKeyword, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_functionDescriptor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDescriptor" ):
                listener.enterFunctionDescriptor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDescriptor" ):
                listener.exitFunctionDescriptor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionDescriptor" ):
                return visitor.visitFunctionDescriptor(self)
            else:
                return visitor.visitChildren(self)




    def functionDescriptor(self):

        localctx = SolidityParser.FunctionDescriptorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_functionDescriptor)
        try:
            self.state = 387
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__28]:
                self.enterOuterAlt(localctx, 1)
                self.state = 378
                self.match(SolidityParser.T__28)
                self.state = 382
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SolidityParser.T__12, SolidityParser.T__39, SolidityParser.T__51, SolidityParser.Identifier]:
                    self.state = 379
                    self.identifier()
                    pass
                elif token in [SolidityParser.ReceiveKeyword]:
                    self.state = 380
                    self.match(SolidityParser.ReceiveKeyword)
                    pass
                elif token in [SolidityParser.FallbackKeyword]:
                    self.state = 381
                    self.match(SolidityParser.FallbackKeyword)
                    pass
                elif token in [SolidityParser.T__21]:
                    pass
                else:
                    pass
                pass
            elif token in [SolidityParser.ConstructorKeyword]:
                self.enterOuterAlt(localctx, 2)
                self.state = 384
                self.match(SolidityParser.ConstructorKeyword)
                pass
            elif token in [SolidityParser.FallbackKeyword]:
                self.enterOuterAlt(localctx, 3)
                self.state = 385
                self.match(SolidityParser.FallbackKeyword)
                pass
            elif token in [SolidityParser.ReceiveKeyword]:
                self.enterOuterAlt(localctx, 4)
                self.state = 386
                self.match(SolidityParser.ReceiveKeyword)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_returnParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnParameters" ):
                listener.enterReturnParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnParameters" ):
                listener.exitReturnParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnParameters" ):
                return visitor.visitReturnParameters(self)
            else:
                return visitor.visitChildren(self)




    def returnParameters(self):

        localctx = SolidityParser.ReturnParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_returnParameters)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 389
            self.match(SolidityParser.T__29)
            self.state = 390
            self.parameterList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def modifierInvocation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ModifierInvocationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ModifierInvocationContext,i)


        def stateMutability(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StateMutabilityContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StateMutabilityContext,i)


        def ExternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.ExternalKeyword)
            else:
                return self.getToken(SolidityParser.ExternalKeyword, i)

        def PublicKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.PublicKeyword)
            else:
                return self.getToken(SolidityParser.PublicKeyword, i)

        def InternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.InternalKeyword)
            else:
                return self.getToken(SolidityParser.InternalKeyword, i)

        def PrivateKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.PrivateKeyword)
            else:
                return self.getToken(SolidityParser.PrivateKeyword, i)

        def VirtualKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.VirtualKeyword)
            else:
                return self.getToken(SolidityParser.VirtualKeyword, i)

        def overrideSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.OverrideSpecifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.OverrideSpecifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_modifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifierList" ):
                listener.enterModifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifierList" ):
                listener.exitModifierList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModifierList" ):
                return visitor.visitModifierList(self)
            else:
                return visitor.visitChildren(self)




    def modifierList(self):

        localctx = SolidityParser.ModifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_modifierList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 402
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,35,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 400
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [SolidityParser.T__12, SolidityParser.T__39, SolidityParser.T__51, SolidityParser.Identifier]:
                        self.state = 392
                        self.modifierInvocation()
                        pass
                    elif token in [SolidityParser.ConstantKeyword, SolidityParser.PayableKeyword, SolidityParser.PureKeyword, SolidityParser.ViewKeyword]:
                        self.state = 393
                        self.stateMutability()
                        pass
                    elif token in [SolidityParser.ExternalKeyword]:
                        self.state = 394
                        self.match(SolidityParser.ExternalKeyword)
                        pass
                    elif token in [SolidityParser.PublicKeyword]:
                        self.state = 395
                        self.match(SolidityParser.PublicKeyword)
                        pass
                    elif token in [SolidityParser.InternalKeyword]:
                        self.state = 396
                        self.match(SolidityParser.InternalKeyword)
                        pass
                    elif token in [SolidityParser.PrivateKeyword]:
                        self.state = 397
                        self.match(SolidityParser.PrivateKeyword)
                        pass
                    elif token in [SolidityParser.VirtualKeyword]:
                        self.state = 398
                        self.match(SolidityParser.VirtualKeyword)
                        pass
                    elif token in [SolidityParser.T__23]:
                        self.state = 399
                        self.overrideSpecifier()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 404
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,35,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_modifierInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifierInvocation" ):
                listener.enterModifierInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifierInvocation" ):
                listener.exitModifierInvocation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModifierInvocation" ):
                return visitor.visitModifierInvocation(self)
            else:
                return visitor.visitChildren(self)




    def modifierInvocation(self):

        localctx = SolidityParser.ModifierInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_modifierInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 405
            self.identifier()
            self.state = 411
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.state = 406
                self.match(SolidityParser.T__21)
                self.state = 408
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__3) | (1 << SolidityParser.T__12) | (1 << SolidityParser.T__21) | (1 << SolidityParser.T__32) | (1 << SolidityParser.T__39) | (1 << SolidityParser.T__50) | (1 << SolidityParser.T__51) | (1 << SolidityParser.T__52) | (1 << SolidityParser.T__53) | (1 << SolidityParser.T__54) | (1 << SolidityParser.T__55) | (1 << SolidityParser.T__56) | (1 << SolidityParser.T__57) | (1 << SolidityParser.T__59) | (1 << SolidityParser.T__60) | (1 << SolidityParser.T__61) | (1 << SolidityParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SolidityParser.T__63 - 64)) | (1 << (SolidityParser.Int - 64)) | (1 << (SolidityParser.Uint - 64)) | (1 << (SolidityParser.Byte - 64)) | (1 << (SolidityParser.Fixed - 64)) | (1 << (SolidityParser.Ufixed - 64)) | (1 << (SolidityParser.BooleanLiteral - 64)) | (1 << (SolidityParser.DecimalNumber - 64)) | (1 << (SolidityParser.HexNumber - 64)) | (1 << (SolidityParser.HexLiteralFragment - 64)) | (1 << (SolidityParser.PayableKeyword - 64)) | (1 << (SolidityParser.TypeKeyword - 64)) | (1 << (SolidityParser.Identifier - 64)) | (1 << (SolidityParser.StringLiteralFragment - 64)))) != 0):
                    self.state = 407
                    self.expressionList()


                self.state = 410
                self.match(SolidityParser.T__22)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def eventParameterList(self):
            return self.getTypedRuleContext(SolidityParser.EventParameterListContext,0)


        def AnonymousKeyword(self):
            return self.getToken(SolidityParser.AnonymousKeyword, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_eventDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventDefinition" ):
                listener.enterEventDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventDefinition" ):
                listener.exitEventDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEventDefinition" ):
                return visitor.visitEventDefinition(self)
            else:
                return visitor.visitChildren(self)




    def eventDefinition(self):

        localctx = SolidityParser.EventDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_eventDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 413
            self.match(SolidityParser.T__30)
            self.state = 414
            self.identifier()
            self.state = 415
            self.eventParameterList()
            self.state = 417
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.AnonymousKeyword:
                self.state = 416
                self.match(SolidityParser.AnonymousKeyword)


            self.state = 419
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def enumValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.EnumValueContext)
            else:
                return self.getTypedRuleContext(SolidityParser.EnumValueContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_enumDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumDefinition" ):
                listener.enterEnumDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumDefinition" ):
                listener.exitEnumDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumDefinition" ):
                return visitor.visitEnumDefinition(self)
            else:
                return visitor.visitChildren(self)




    def enumDefinition(self):

        localctx = SolidityParser.EnumDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_enumDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 421
            self.match(SolidityParser.T__31)
            self.state = 422
            self.identifier()
            self.state = 423
            self.match(SolidityParser.T__13)
            self.state = 425
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__12) | (1 << SolidityParser.T__39) | (1 << SolidityParser.T__51))) != 0) or _la==SolidityParser.Identifier:
                self.state = 424
                self.enumValue()


            self.state = 431
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SolidityParser.T__14:
                self.state = 427
                self.match(SolidityParser.T__14)
                self.state = 428
                self.enumValue()
                self.state = 433
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 434
            self.match(SolidityParser.T__15)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_enumValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumValue" ):
                listener.enterEnumValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumValue" ):
                listener.exitEnumValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumValue" ):
                return visitor.visitEnumValue(self)
            else:
                return visitor.visitChildren(self)




    def enumValue(self):

        localctx = SolidityParser.EnumValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_enumValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 436
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ParameterContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ParameterContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_parameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterList" ):
                listener.enterParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterList" ):
                listener.exitParameterList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterList" ):
                return visitor.visitParameterList(self)
            else:
                return visitor.visitChildren(self)




    def parameterList(self):

        localctx = SolidityParser.ParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_parameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 438
            self.match(SolidityParser.T__21)
            self.state = 447
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__12) | (1 << SolidityParser.T__28) | (1 << SolidityParser.T__35) | (1 << SolidityParser.T__39) | (1 << SolidityParser.T__50) | (1 << SolidityParser.T__51) | (1 << SolidityParser.T__52) | (1 << SolidityParser.T__53) | (1 << SolidityParser.T__54))) != 0) or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (SolidityParser.Int - 93)) | (1 << (SolidityParser.Uint - 93)) | (1 << (SolidityParser.Byte - 93)) | (1 << (SolidityParser.Fixed - 93)) | (1 << (SolidityParser.Ufixed - 93)) | (1 << (SolidityParser.Identifier - 93)))) != 0):
                self.state = 439
                self.parameter()
                self.state = 444
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SolidityParser.T__14:
                    self.state = 440
                    self.match(SolidityParser.T__14)
                    self.state = 441
                    self.parameter()
                    self.state = 446
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 449
            self.match(SolidityParser.T__22)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def storageLocation(self):
            return self.getTypedRuleContext(SolidityParser.StorageLocationContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter" ):
                listener.enterParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter" ):
                listener.exitParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter" ):
                return visitor.visitParameter(self)
            else:
                return visitor.visitChildren(self)




    def parameter(self):

        localctx = SolidityParser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 451
            self.typeName(0)
            self.state = 453
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.state = 452
                self.storageLocation()


            self.state = 456
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__12) | (1 << SolidityParser.T__39) | (1 << SolidityParser.T__51))) != 0) or _la==SolidityParser.Identifier:
                self.state = 455
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eventParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.EventParameterContext)
            else:
                return self.getTypedRuleContext(SolidityParser.EventParameterContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_eventParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventParameterList" ):
                listener.enterEventParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventParameterList" ):
                listener.exitEventParameterList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEventParameterList" ):
                return visitor.visitEventParameterList(self)
            else:
                return visitor.visitChildren(self)




    def eventParameterList(self):

        localctx = SolidityParser.EventParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_eventParameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 458
            self.match(SolidityParser.T__21)
            self.state = 467
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__12) | (1 << SolidityParser.T__28) | (1 << SolidityParser.T__35) | (1 << SolidityParser.T__39) | (1 << SolidityParser.T__50) | (1 << SolidityParser.T__51) | (1 << SolidityParser.T__52) | (1 << SolidityParser.T__53) | (1 << SolidityParser.T__54))) != 0) or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (SolidityParser.Int - 93)) | (1 << (SolidityParser.Uint - 93)) | (1 << (SolidityParser.Byte - 93)) | (1 << (SolidityParser.Fixed - 93)) | (1 << (SolidityParser.Ufixed - 93)) | (1 << (SolidityParser.Identifier - 93)))) != 0):
                self.state = 459
                self.eventParameter()
                self.state = 464
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SolidityParser.T__14:
                    self.state = 460
                    self.match(SolidityParser.T__14)
                    self.state = 461
                    self.eventParameter()
                    self.state = 466
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 469
            self.match(SolidityParser.T__22)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def IndexedKeyword(self):
            return self.getToken(SolidityParser.IndexedKeyword, 0)

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_eventParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventParameter" ):
                listener.enterEventParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventParameter" ):
                listener.exitEventParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEventParameter" ):
                return visitor.visitEventParameter(self)
            else:
                return visitor.visitChildren(self)




    def eventParameter(self):

        localctx = SolidityParser.EventParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_eventParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 471
            self.typeName(0)
            self.state = 473
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.IndexedKeyword:
                self.state = 472
                self.match(SolidityParser.IndexedKeyword)


            self.state = 476
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__12) | (1 << SolidityParser.T__39) | (1 << SolidityParser.T__51))) != 0) or _la==SolidityParser.Identifier:
                self.state = 475
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def storageLocation(self):
            return self.getTypedRuleContext(SolidityParser.StorageLocationContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_variableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclaration" ):
                listener.enterVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclaration" ):
                listener.exitVariableDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDeclaration" ):
                return visitor.visitVariableDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def variableDeclaration(self):

        localctx = SolidityParser.VariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_variableDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 478
            self.typeName(0)
            self.state = 480
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.state = 479
                self.storageLocation()


            self.state = 482
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementaryTypeName(self):
            return self.getTypedRuleContext(SolidityParser.ElementaryTypeNameContext,0)


        def userDefinedTypeName(self):
            return self.getTypedRuleContext(SolidityParser.UserDefinedTypeNameContext,0)


        def mapping(self):
            return self.getTypedRuleContext(SolidityParser.MappingContext,0)


        def functionTypeName(self):
            return self.getTypedRuleContext(SolidityParser.FunctionTypeNameContext,0)


        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_typeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeName" ):
                listener.enterTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeName" ):
                listener.exitTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeName" ):
                return visitor.visitTypeName(self)
            else:
                return visitor.visitChildren(self)



    def typeName(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SolidityParser.TypeNameContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 60
        self.enterRecursionRule(localctx, 60, self.RULE_typeName, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 489
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.state = 485
                self.elementaryTypeName()
                pass

            elif la_ == 2:
                self.state = 486
                self.userDefinedTypeName()
                pass

            elif la_ == 3:
                self.state = 487
                self.mapping()
                pass

            elif la_ == 4:
                self.state = 488
                self.functionTypeName()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 499
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,52,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SolidityParser.TypeNameContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_typeName)
                    self.state = 491
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 492
                    self.match(SolidityParser.T__32)
                    self.state = 494
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__3) | (1 << SolidityParser.T__12) | (1 << SolidityParser.T__21) | (1 << SolidityParser.T__32) | (1 << SolidityParser.T__39) | (1 << SolidityParser.T__50) | (1 << SolidityParser.T__51) | (1 << SolidityParser.T__52) | (1 << SolidityParser.T__53) | (1 << SolidityParser.T__54) | (1 << SolidityParser.T__55) | (1 << SolidityParser.T__56) | (1 << SolidityParser.T__57) | (1 << SolidityParser.T__59) | (1 << SolidityParser.T__60) | (1 << SolidityParser.T__61) | (1 << SolidityParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SolidityParser.T__63 - 64)) | (1 << (SolidityParser.Int - 64)) | (1 << (SolidityParser.Uint - 64)) | (1 << (SolidityParser.Byte - 64)) | (1 << (SolidityParser.Fixed - 64)) | (1 << (SolidityParser.Ufixed - 64)) | (1 << (SolidityParser.BooleanLiteral - 64)) | (1 << (SolidityParser.DecimalNumber - 64)) | (1 << (SolidityParser.HexNumber - 64)) | (1 << (SolidityParser.HexLiteralFragment - 64)) | (1 << (SolidityParser.PayableKeyword - 64)) | (1 << (SolidityParser.TypeKeyword - 64)) | (1 << (SolidityParser.Identifier - 64)) | (1 << (SolidityParser.StringLiteralFragment - 64)))) != 0):
                        self.state = 493
                        self.expression(0)


                    self.state = 496
                    self.match(SolidityParser.T__33) 
                self.state = 501
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,52,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class UserDefinedTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_userDefinedTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserDefinedTypeName" ):
                listener.enterUserDefinedTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserDefinedTypeName" ):
                listener.exitUserDefinedTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUserDefinedTypeName" ):
                return visitor.visitUserDefinedTypeName(self)
            else:
                return visitor.visitChildren(self)




    def userDefinedTypeName(self):

        localctx = SolidityParser.UserDefinedTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_userDefinedTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 502
            self.identifier()
            self.state = 507
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,53,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 503
                    self.match(SolidityParser.T__34)
                    self.state = 504
                    self.identifier() 
                self.state = 509
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,53,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MappingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def elementaryTypeName(self):
            return self.getTypedRuleContext(SolidityParser.ElementaryTypeNameContext,0)


        def userDefinedTypeName(self):
            return self.getTypedRuleContext(SolidityParser.UserDefinedTypeNameContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_mapping

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapping" ):
                listener.enterMapping(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapping" ):
                listener.exitMapping(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMapping" ):
                return visitor.visitMapping(self)
            else:
                return visitor.visitChildren(self)




    def mapping(self):

        localctx = SolidityParser.MappingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_mapping)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 510
            self.match(SolidityParser.T__35)
            self.state = 511
            self.match(SolidityParser.T__21)
            self.state = 514
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.state = 512
                self.elementaryTypeName()
                pass

            elif la_ == 2:
                self.state = 513
                self.userDefinedTypeName()
                pass


            self.state = 516
            self.match(SolidityParser.T__36)
            self.state = 517
            self.typeName(0)
            self.state = 518
            self.match(SolidityParser.T__22)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def modifierList(self):
            return self.getTypedRuleContext(SolidityParser.ModifierListContext,0)


        def returnParameters(self):
            return self.getTypedRuleContext(SolidityParser.ReturnParametersContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTypeName" ):
                listener.enterFunctionTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTypeName" ):
                listener.exitFunctionTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionTypeName" ):
                return visitor.visitFunctionTypeName(self)
            else:
                return visitor.visitChildren(self)




    def functionTypeName(self):

        localctx = SolidityParser.FunctionTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_functionTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 520
            self.match(SolidityParser.T__28)
            self.state = 521
            self.parameterList()
            self.state = 522
            self.modifierList()
            self.state = 524
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
            if la_ == 1:
                self.state = 523
                self.returnParameters()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StorageLocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SolidityParser.RULE_storageLocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageLocation" ):
                listener.enterStorageLocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageLocation" ):
                listener.exitStorageLocation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStorageLocation" ):
                return visitor.visitStorageLocation(self)
            else:
                return visitor.visitChildren(self)




    def storageLocation(self):

        localctx = SolidityParser.StorageLocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_storageLocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 526
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__37) | (1 << SolidityParser.T__38) | (1 << SolidityParser.T__39))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StateMutabilityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PureKeyword(self):
            return self.getToken(SolidityParser.PureKeyword, 0)

        def ConstantKeyword(self):
            return self.getToken(SolidityParser.ConstantKeyword, 0)

        def ViewKeyword(self):
            return self.getToken(SolidityParser.ViewKeyword, 0)

        def PayableKeyword(self):
            return self.getToken(SolidityParser.PayableKeyword, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_stateMutability

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStateMutability" ):
                listener.enterStateMutability(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStateMutability" ):
                listener.exitStateMutability(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStateMutability" ):
                return visitor.visitStateMutability(self)
            else:
                return visitor.visitChildren(self)




    def stateMutability(self):

        localctx = SolidityParser.StateMutabilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_stateMutability)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 528
            _la = self._input.LA(1)
            if not(((((_la - 106)) & ~0x3f) == 0 and ((1 << (_la - 106)) & ((1 << (SolidityParser.ConstantKeyword - 106)) | (1 << (SolidityParser.PayableKeyword - 106)) | (1 << (SolidityParser.PureKeyword - 106)) | (1 << (SolidityParser.ViewKeyword - 106)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StatementContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StatementContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = SolidityParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 530
            self.match(SolidityParser.T__13)
            self.state = 534
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__3) | (1 << SolidityParser.T__12) | (1 << SolidityParser.T__13) | (1 << SolidityParser.T__21) | (1 << SolidityParser.T__25) | (1 << SolidityParser.T__28) | (1 << SolidityParser.T__32) | (1 << SolidityParser.T__35) | (1 << SolidityParser.T__39) | (1 << SolidityParser.T__40) | (1 << SolidityParser.T__42) | (1 << SolidityParser.T__44) | (1 << SolidityParser.T__45) | (1 << SolidityParser.T__46) | (1 << SolidityParser.T__47) | (1 << SolidityParser.T__48) | (1 << SolidityParser.T__49) | (1 << SolidityParser.T__50) | (1 << SolidityParser.T__51) | (1 << SolidityParser.T__52) | (1 << SolidityParser.T__53) | (1 << SolidityParser.T__54) | (1 << SolidityParser.T__55) | (1 << SolidityParser.T__56) | (1 << SolidityParser.T__57) | (1 << SolidityParser.T__59) | (1 << SolidityParser.T__60) | (1 << SolidityParser.T__61) | (1 << SolidityParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SolidityParser.T__63 - 64)) | (1 << (SolidityParser.Int - 64)) | (1 << (SolidityParser.Uint - 64)) | (1 << (SolidityParser.Byte - 64)) | (1 << (SolidityParser.Fixed - 64)) | (1 << (SolidityParser.Ufixed - 64)) | (1 << (SolidityParser.BooleanLiteral - 64)) | (1 << (SolidityParser.DecimalNumber - 64)) | (1 << (SolidityParser.HexNumber - 64)) | (1 << (SolidityParser.HexLiteralFragment - 64)) | (1 << (SolidityParser.BreakKeyword - 64)) | (1 << (SolidityParser.ContinueKeyword - 64)) | (1 << (SolidityParser.PayableKeyword - 64)) | (1 << (SolidityParser.TypeKeyword - 64)) | (1 << (SolidityParser.Identifier - 64)) | (1 << (SolidityParser.StringLiteralFragment - 64)))) != 0):
                self.state = 531
                self.statement()
                self.state = 536
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 537
            self.match(SolidityParser.T__15)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ifStatement(self):
            return self.getTypedRuleContext(SolidityParser.IfStatementContext,0)


        def tryStatement(self):
            return self.getTypedRuleContext(SolidityParser.TryStatementContext,0)


        def whileStatement(self):
            return self.getTypedRuleContext(SolidityParser.WhileStatementContext,0)


        def forStatement(self):
            return self.getTypedRuleContext(SolidityParser.ForStatementContext,0)


        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def inlineAssemblyStatement(self):
            return self.getTypedRuleContext(SolidityParser.InlineAssemblyStatementContext,0)


        def doWhileStatement(self):
            return self.getTypedRuleContext(SolidityParser.DoWhileStatementContext,0)


        def continueStatement(self):
            return self.getTypedRuleContext(SolidityParser.ContinueStatementContext,0)


        def breakStatement(self):
            return self.getTypedRuleContext(SolidityParser.BreakStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(SolidityParser.ReturnStatementContext,0)


        def throwStatement(self):
            return self.getTypedRuleContext(SolidityParser.ThrowStatementContext,0)


        def emitStatement(self):
            return self.getTypedRuleContext(SolidityParser.EmitStatementContext,0)


        def simpleStatement(self):
            return self.getTypedRuleContext(SolidityParser.SimpleStatementContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = SolidityParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_statement)
        try:
            self.state = 552
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__40]:
                self.enterOuterAlt(localctx, 1)
                self.state = 539
                self.ifStatement()
                pass
            elif token in [SolidityParser.T__42]:
                self.enterOuterAlt(localctx, 2)
                self.state = 540
                self.tryStatement()
                pass
            elif token in [SolidityParser.T__44]:
                self.enterOuterAlt(localctx, 3)
                self.state = 541
                self.whileStatement()
                pass
            elif token in [SolidityParser.T__25]:
                self.enterOuterAlt(localctx, 4)
                self.state = 542
                self.forStatement()
                pass
            elif token in [SolidityParser.T__13]:
                self.enterOuterAlt(localctx, 5)
                self.state = 543
                self.block()
                pass
            elif token in [SolidityParser.T__45]:
                self.enterOuterAlt(localctx, 6)
                self.state = 544
                self.inlineAssemblyStatement()
                pass
            elif token in [SolidityParser.T__46]:
                self.enterOuterAlt(localctx, 7)
                self.state = 545
                self.doWhileStatement()
                pass
            elif token in [SolidityParser.ContinueKeyword]:
                self.enterOuterAlt(localctx, 8)
                self.state = 546
                self.continueStatement()
                pass
            elif token in [SolidityParser.BreakKeyword]:
                self.enterOuterAlt(localctx, 9)
                self.state = 547
                self.breakStatement()
                pass
            elif token in [SolidityParser.T__47]:
                self.enterOuterAlt(localctx, 10)
                self.state = 548
                self.returnStatement()
                pass
            elif token in [SolidityParser.T__48]:
                self.enterOuterAlt(localctx, 11)
                self.state = 549
                self.throwStatement()
                pass
            elif token in [SolidityParser.T__49]:
                self.enterOuterAlt(localctx, 12)
                self.state = 550
                self.emitStatement()
                pass
            elif token in [SolidityParser.T__3, SolidityParser.T__12, SolidityParser.T__21, SolidityParser.T__28, SolidityParser.T__32, SolidityParser.T__35, SolidityParser.T__39, SolidityParser.T__50, SolidityParser.T__51, SolidityParser.T__52, SolidityParser.T__53, SolidityParser.T__54, SolidityParser.T__55, SolidityParser.T__56, SolidityParser.T__57, SolidityParser.T__59, SolidityParser.T__60, SolidityParser.T__61, SolidityParser.T__62, SolidityParser.T__63, SolidityParser.Int, SolidityParser.Uint, SolidityParser.Byte, SolidityParser.Fixed, SolidityParser.Ufixed, SolidityParser.BooleanLiteral, SolidityParser.DecimalNumber, SolidityParser.HexNumber, SolidityParser.HexLiteralFragment, SolidityParser.PayableKeyword, SolidityParser.TypeKeyword, SolidityParser.Identifier, SolidityParser.StringLiteralFragment]:
                self.enterOuterAlt(localctx, 13)
                self.state = 551
                self.simpleStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionStatement" ):
                return visitor.visitExpressionStatement(self)
            else:
                return visitor.visitChildren(self)




    def expressionStatement(self):

        localctx = SolidityParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_expressionStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 554
            self.expression(0)
            self.state = 555
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StatementContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StatementContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_ifStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStatement" ):
                listener.enterIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStatement" ):
                listener.exitIfStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfStatement" ):
                return visitor.visitIfStatement(self)
            else:
                return visitor.visitChildren(self)




    def ifStatement(self):

        localctx = SolidityParser.IfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_ifStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 557
            self.match(SolidityParser.T__40)
            self.state = 558
            self.match(SolidityParser.T__21)
            self.state = 559
            self.expression(0)
            self.state = 560
            self.match(SolidityParser.T__22)
            self.state = 561
            self.statement()
            self.state = 564
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.state = 562
                self.match(SolidityParser.T__41)
                self.state = 563
                self.statement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def returnParameters(self):
            return self.getTypedRuleContext(SolidityParser.ReturnParametersContext,0)


        def catchClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.CatchClauseContext)
            else:
                return self.getTypedRuleContext(SolidityParser.CatchClauseContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_tryStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryStatement" ):
                listener.enterTryStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryStatement" ):
                listener.exitTryStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTryStatement" ):
                return visitor.visitTryStatement(self)
            else:
                return visitor.visitChildren(self)




    def tryStatement(self):

        localctx = SolidityParser.TryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_tryStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 566
            self.match(SolidityParser.T__42)
            self.state = 567
            self.expression(0)
            self.state = 569
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__29:
                self.state = 568
                self.returnParameters()


            self.state = 571
            self.block()
            self.state = 573 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 572
                self.catchClause()
                self.state = 575 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==SolidityParser.T__43):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatchClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_catchClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchClause" ):
                listener.enterCatchClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchClause" ):
                listener.exitCatchClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCatchClause" ):
                return visitor.visitCatchClause(self)
            else:
                return visitor.visitChildren(self)




    def catchClause(self):

        localctx = SolidityParser.CatchClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_catchClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 577
            self.match(SolidityParser.T__43)
            self.state = 582
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__12) | (1 << SolidityParser.T__21) | (1 << SolidityParser.T__39) | (1 << SolidityParser.T__51))) != 0) or _la==SolidityParser.Identifier:
                self.state = 579
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__12) | (1 << SolidityParser.T__39) | (1 << SolidityParser.T__51))) != 0) or _la==SolidityParser.Identifier:
                    self.state = 578
                    self.identifier()


                self.state = 581
                self.parameterList()


            self.state = 584
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def statement(self):
            return self.getTypedRuleContext(SolidityParser.StatementContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_whileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatement" ):
                listener.enterWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatement" ):
                listener.exitWhileStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileStatement" ):
                return visitor.visitWhileStatement(self)
            else:
                return visitor.visitChildren(self)




    def whileStatement(self):

        localctx = SolidityParser.WhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_whileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 586
            self.match(SolidityParser.T__44)
            self.state = 587
            self.match(SolidityParser.T__21)
            self.state = 588
            self.expression(0)
            self.state = 589
            self.match(SolidityParser.T__22)
            self.state = 590
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(SolidityParser.StatementContext,0)


        def simpleStatement(self):
            return self.getTypedRuleContext(SolidityParser.SimpleStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionStatementContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_forStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStatement" ):
                listener.enterForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStatement" ):
                listener.exitForStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForStatement" ):
                return visitor.visitForStatement(self)
            else:
                return visitor.visitChildren(self)




    def forStatement(self):

        localctx = SolidityParser.ForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_forStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 592
            self.match(SolidityParser.T__25)
            self.state = 593
            self.match(SolidityParser.T__21)
            self.state = 596
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__3, SolidityParser.T__12, SolidityParser.T__21, SolidityParser.T__28, SolidityParser.T__32, SolidityParser.T__35, SolidityParser.T__39, SolidityParser.T__50, SolidityParser.T__51, SolidityParser.T__52, SolidityParser.T__53, SolidityParser.T__54, SolidityParser.T__55, SolidityParser.T__56, SolidityParser.T__57, SolidityParser.T__59, SolidityParser.T__60, SolidityParser.T__61, SolidityParser.T__62, SolidityParser.T__63, SolidityParser.Int, SolidityParser.Uint, SolidityParser.Byte, SolidityParser.Fixed, SolidityParser.Ufixed, SolidityParser.BooleanLiteral, SolidityParser.DecimalNumber, SolidityParser.HexNumber, SolidityParser.HexLiteralFragment, SolidityParser.PayableKeyword, SolidityParser.TypeKeyword, SolidityParser.Identifier, SolidityParser.StringLiteralFragment]:
                self.state = 594
                self.simpleStatement()
                pass
            elif token in [SolidityParser.T__1]:
                self.state = 595
                self.match(SolidityParser.T__1)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 600
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__3, SolidityParser.T__12, SolidityParser.T__21, SolidityParser.T__32, SolidityParser.T__39, SolidityParser.T__50, SolidityParser.T__51, SolidityParser.T__52, SolidityParser.T__53, SolidityParser.T__54, SolidityParser.T__55, SolidityParser.T__56, SolidityParser.T__57, SolidityParser.T__59, SolidityParser.T__60, SolidityParser.T__61, SolidityParser.T__62, SolidityParser.T__63, SolidityParser.Int, SolidityParser.Uint, SolidityParser.Byte, SolidityParser.Fixed, SolidityParser.Ufixed, SolidityParser.BooleanLiteral, SolidityParser.DecimalNumber, SolidityParser.HexNumber, SolidityParser.HexLiteralFragment, SolidityParser.PayableKeyword, SolidityParser.TypeKeyword, SolidityParser.Identifier, SolidityParser.StringLiteralFragment]:
                self.state = 598
                self.expressionStatement()
                pass
            elif token in [SolidityParser.T__1]:
                self.state = 599
                self.match(SolidityParser.T__1)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 603
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__3) | (1 << SolidityParser.T__12) | (1 << SolidityParser.T__21) | (1 << SolidityParser.T__32) | (1 << SolidityParser.T__39) | (1 << SolidityParser.T__50) | (1 << SolidityParser.T__51) | (1 << SolidityParser.T__52) | (1 << SolidityParser.T__53) | (1 << SolidityParser.T__54) | (1 << SolidityParser.T__55) | (1 << SolidityParser.T__56) | (1 << SolidityParser.T__57) | (1 << SolidityParser.T__59) | (1 << SolidityParser.T__60) | (1 << SolidityParser.T__61) | (1 << SolidityParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SolidityParser.T__63 - 64)) | (1 << (SolidityParser.Int - 64)) | (1 << (SolidityParser.Uint - 64)) | (1 << (SolidityParser.Byte - 64)) | (1 << (SolidityParser.Fixed - 64)) | (1 << (SolidityParser.Ufixed - 64)) | (1 << (SolidityParser.BooleanLiteral - 64)) | (1 << (SolidityParser.DecimalNumber - 64)) | (1 << (SolidityParser.HexNumber - 64)) | (1 << (SolidityParser.HexLiteralFragment - 64)) | (1 << (SolidityParser.PayableKeyword - 64)) | (1 << (SolidityParser.TypeKeyword - 64)) | (1 << (SolidityParser.Identifier - 64)) | (1 << (SolidityParser.StringLiteralFragment - 64)))) != 0):
                self.state = 602
                self.expression(0)


            self.state = 605
            self.match(SolidityParser.T__22)
            self.state = 606
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclarationStatement(self):
            return self.getTypedRuleContext(SolidityParser.VariableDeclarationStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionStatementContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_simpleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleStatement" ):
                listener.enterSimpleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleStatement" ):
                listener.exitSimpleStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleStatement" ):
                return visitor.visitSimpleStatement(self)
            else:
                return visitor.visitChildren(self)




    def simpleStatement(self):

        localctx = SolidityParser.SimpleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_simpleStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 610
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.state = 608
                self.variableDeclarationStatement()
                pass

            elif la_ == 2:
                self.state = 609
                self.expressionStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InlineAssemblyStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,0)


        def StringLiteralFragment(self):
            return self.getToken(SolidityParser.StringLiteralFragment, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_inlineAssemblyStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineAssemblyStatement" ):
                listener.enterInlineAssemblyStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineAssemblyStatement" ):
                listener.exitInlineAssemblyStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInlineAssemblyStatement" ):
                return visitor.visitInlineAssemblyStatement(self)
            else:
                return visitor.visitChildren(self)




    def inlineAssemblyStatement(self):

        localctx = SolidityParser.InlineAssemblyStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_inlineAssemblyStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 612
            self.match(SolidityParser.T__45)
            self.state = 614
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.StringLiteralFragment:
                self.state = 613
                self.match(SolidityParser.StringLiteralFragment)


            self.state = 616
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DoWhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(SolidityParser.StatementContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_doWhileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoWhileStatement" ):
                listener.enterDoWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoWhileStatement" ):
                listener.exitDoWhileStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDoWhileStatement" ):
                return visitor.visitDoWhileStatement(self)
            else:
                return visitor.visitChildren(self)




    def doWhileStatement(self):

        localctx = SolidityParser.DoWhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_doWhileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 618
            self.match(SolidityParser.T__46)
            self.state = 619
            self.statement()
            self.state = 620
            self.match(SolidityParser.T__44)
            self.state = 621
            self.match(SolidityParser.T__21)
            self.state = 622
            self.expression(0)
            self.state = 623
            self.match(SolidityParser.T__22)
            self.state = 624
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContinueStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ContinueKeyword(self):
            return self.getToken(SolidityParser.ContinueKeyword, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_continueStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinueStatement" ):
                listener.enterContinueStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinueStatement" ):
                listener.exitContinueStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContinueStatement" ):
                return visitor.visitContinueStatement(self)
            else:
                return visitor.visitChildren(self)




    def continueStatement(self):

        localctx = SolidityParser.ContinueStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_continueStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 626
            self.match(SolidityParser.ContinueKeyword)
            self.state = 627
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BreakStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BreakKeyword(self):
            return self.getToken(SolidityParser.BreakKeyword, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_breakStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakStatement" ):
                listener.enterBreakStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakStatement" ):
                listener.exitBreakStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBreakStatement" ):
                return visitor.visitBreakStatement(self)
            else:
                return visitor.visitChildren(self)




    def breakStatement(self):

        localctx = SolidityParser.BreakStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_breakStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 629
            self.match(SolidityParser.BreakKeyword)
            self.state = 630
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_returnStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnStatement" ):
                return visitor.visitReturnStatement(self)
            else:
                return visitor.visitChildren(self)




    def returnStatement(self):

        localctx = SolidityParser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_returnStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 632
            self.match(SolidityParser.T__47)
            self.state = 634
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__3) | (1 << SolidityParser.T__12) | (1 << SolidityParser.T__21) | (1 << SolidityParser.T__32) | (1 << SolidityParser.T__39) | (1 << SolidityParser.T__50) | (1 << SolidityParser.T__51) | (1 << SolidityParser.T__52) | (1 << SolidityParser.T__53) | (1 << SolidityParser.T__54) | (1 << SolidityParser.T__55) | (1 << SolidityParser.T__56) | (1 << SolidityParser.T__57) | (1 << SolidityParser.T__59) | (1 << SolidityParser.T__60) | (1 << SolidityParser.T__61) | (1 << SolidityParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SolidityParser.T__63 - 64)) | (1 << (SolidityParser.Int - 64)) | (1 << (SolidityParser.Uint - 64)) | (1 << (SolidityParser.Byte - 64)) | (1 << (SolidityParser.Fixed - 64)) | (1 << (SolidityParser.Ufixed - 64)) | (1 << (SolidityParser.BooleanLiteral - 64)) | (1 << (SolidityParser.DecimalNumber - 64)) | (1 << (SolidityParser.HexNumber - 64)) | (1 << (SolidityParser.HexLiteralFragment - 64)) | (1 << (SolidityParser.PayableKeyword - 64)) | (1 << (SolidityParser.TypeKeyword - 64)) | (1 << (SolidityParser.Identifier - 64)) | (1 << (SolidityParser.StringLiteralFragment - 64)))) != 0):
                self.state = 633
                self.expression(0)


            self.state = 636
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThrowStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SolidityParser.RULE_throwStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrowStatement" ):
                listener.enterThrowStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrowStatement" ):
                listener.exitThrowStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThrowStatement" ):
                return visitor.visitThrowStatement(self)
            else:
                return visitor.visitChildren(self)




    def throwStatement(self):

        localctx = SolidityParser.ThrowStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_throwStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 638
            self.match(SolidityParser.T__48)
            self.state = 639
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmitStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionCall(self):
            return self.getTypedRuleContext(SolidityParser.FunctionCallContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_emitStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmitStatement" ):
                listener.enterEmitStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmitStatement" ):
                listener.exitEmitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEmitStatement" ):
                return visitor.visitEmitStatement(self)
            else:
                return visitor.visitChildren(self)




    def emitStatement(self):

        localctx = SolidityParser.EmitStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_emitStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 641
            self.match(SolidityParser.T__49)
            self.state = 642
            self.functionCall()
            self.state = 643
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclarationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierList(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierListContext,0)


        def variableDeclaration(self):
            return self.getTypedRuleContext(SolidityParser.VariableDeclarationContext,0)


        def variableDeclarationList(self):
            return self.getTypedRuleContext(SolidityParser.VariableDeclarationListContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_variableDeclarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarationStatement" ):
                listener.enterVariableDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarationStatement" ):
                listener.exitVariableDeclarationStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDeclarationStatement" ):
                return visitor.visitVariableDeclarationStatement(self)
            else:
                return visitor.visitChildren(self)




    def variableDeclarationStatement(self):

        localctx = SolidityParser.VariableDeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_variableDeclarationStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 652
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                self.state = 645
                self.match(SolidityParser.T__50)
                self.state = 646
                self.identifierList()
                pass

            elif la_ == 2:
                self.state = 647
                self.variableDeclaration()
                pass

            elif la_ == 3:
                self.state = 648
                self.match(SolidityParser.T__21)
                self.state = 649
                self.variableDeclarationList()
                self.state = 650
                self.match(SolidityParser.T__22)
                pass


            self.state = 656
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__8:
                self.state = 654
                self.match(SolidityParser.T__8)
                self.state = 655
                self.expression(0)


            self.state = 658
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclarationListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.VariableDeclarationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.VariableDeclarationContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_variableDeclarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarationList" ):
                listener.enterVariableDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarationList" ):
                listener.exitVariableDeclarationList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDeclarationList" ):
                return visitor.visitVariableDeclarationList(self)
            else:
                return visitor.visitChildren(self)




    def variableDeclarationList(self):

        localctx = SolidityParser.VariableDeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_variableDeclarationList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 661
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__12) | (1 << SolidityParser.T__28) | (1 << SolidityParser.T__35) | (1 << SolidityParser.T__39) | (1 << SolidityParser.T__50) | (1 << SolidityParser.T__51) | (1 << SolidityParser.T__52) | (1 << SolidityParser.T__53) | (1 << SolidityParser.T__54))) != 0) or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (SolidityParser.Int - 93)) | (1 << (SolidityParser.Uint - 93)) | (1 << (SolidityParser.Byte - 93)) | (1 << (SolidityParser.Fixed - 93)) | (1 << (SolidityParser.Ufixed - 93)) | (1 << (SolidityParser.Identifier - 93)))) != 0):
                self.state = 660
                self.variableDeclaration()


            self.state = 669
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SolidityParser.T__14:
                self.state = 663
                self.match(SolidityParser.T__14)
                self.state = 665
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__12) | (1 << SolidityParser.T__28) | (1 << SolidityParser.T__35) | (1 << SolidityParser.T__39) | (1 << SolidityParser.T__50) | (1 << SolidityParser.T__51) | (1 << SolidityParser.T__52) | (1 << SolidityParser.T__53) | (1 << SolidityParser.T__54))) != 0) or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (SolidityParser.Int - 93)) | (1 << (SolidityParser.Uint - 93)) | (1 << (SolidityParser.Byte - 93)) | (1 << (SolidityParser.Fixed - 93)) | (1 << (SolidityParser.Ufixed - 93)) | (1 << (SolidityParser.Identifier - 93)))) != 0):
                    self.state = 664
                    self.variableDeclaration()


                self.state = 671
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierList" ):
                return visitor.visitIdentifierList(self)
            else:
                return visitor.visitChildren(self)




    def identifierList(self):

        localctx = SolidityParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_identifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 672
            self.match(SolidityParser.T__21)
            self.state = 679
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,75,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 674
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__12) | (1 << SolidityParser.T__39) | (1 << SolidityParser.T__51))) != 0) or _la==SolidityParser.Identifier:
                        self.state = 673
                        self.identifier()


                    self.state = 676
                    self.match(SolidityParser.T__14) 
                self.state = 681
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,75,self._ctx)

            self.state = 683
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__12) | (1 << SolidityParser.T__39) | (1 << SolidityParser.T__51))) != 0) or _la==SolidityParser.Identifier:
                self.state = 682
                self.identifier()


            self.state = 685
            self.match(SolidityParser.T__22)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementaryTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PayableKeyword(self):
            return self.getToken(SolidityParser.PayableKeyword, 0)

        def Int(self):
            return self.getToken(SolidityParser.Int, 0)

        def Uint(self):
            return self.getToken(SolidityParser.Uint, 0)

        def Byte(self):
            return self.getToken(SolidityParser.Byte, 0)

        def Fixed(self):
            return self.getToken(SolidityParser.Fixed, 0)

        def Ufixed(self):
            return self.getToken(SolidityParser.Ufixed, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_elementaryTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementaryTypeName" ):
                listener.enterElementaryTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementaryTypeName" ):
                listener.exitElementaryTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElementaryTypeName" ):
                return visitor.visitElementaryTypeName(self)
            else:
                return visitor.visitChildren(self)




    def elementaryTypeName(self):

        localctx = SolidityParser.ElementaryTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_elementaryTypeName)
        try:
            self.state = 700
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__51]:
                self.enterOuterAlt(localctx, 1)
                self.state = 687
                self.match(SolidityParser.T__51)
                self.state = 689
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
                if la_ == 1:
                    self.state = 688
                    self.match(SolidityParser.PayableKeyword)


                pass
            elif token in [SolidityParser.T__52]:
                self.enterOuterAlt(localctx, 2)
                self.state = 691
                self.match(SolidityParser.T__52)
                pass
            elif token in [SolidityParser.T__53]:
                self.enterOuterAlt(localctx, 3)
                self.state = 692
                self.match(SolidityParser.T__53)
                pass
            elif token in [SolidityParser.T__50]:
                self.enterOuterAlt(localctx, 4)
                self.state = 693
                self.match(SolidityParser.T__50)
                pass
            elif token in [SolidityParser.Int]:
                self.enterOuterAlt(localctx, 5)
                self.state = 694
                self.match(SolidityParser.Int)
                pass
            elif token in [SolidityParser.Uint]:
                self.enterOuterAlt(localctx, 6)
                self.state = 695
                self.match(SolidityParser.Uint)
                pass
            elif token in [SolidityParser.T__54]:
                self.enterOuterAlt(localctx, 7)
                self.state = 696
                self.match(SolidityParser.T__54)
                pass
            elif token in [SolidityParser.Byte]:
                self.enterOuterAlt(localctx, 8)
                self.state = 697
                self.match(SolidityParser.Byte)
                pass
            elif token in [SolidityParser.Fixed]:
                self.enterOuterAlt(localctx, 9)
                self.state = 698
                self.match(SolidityParser.Fixed)
                pass
            elif token in [SolidityParser.Ufixed]:
                self.enterOuterAlt(localctx, 10)
                self.state = 699
                self.match(SolidityParser.Ufixed)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def PayableKeyword(self):
            return self.getToken(SolidityParser.PayableKeyword, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def primaryExpression(self):
            return self.getTypedRuleContext(SolidityParser.PrimaryExpressionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def nameValueList(self):
            return self.getTypedRuleContext(SolidityParser.NameValueListContext,0)


        def functionCallArguments(self):
            return self.getTypedRuleContext(SolidityParser.FunctionCallArgumentsContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SolidityParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 112
        self.enterRecursionRule(localctx, 112, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 725
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                self.state = 703
                self.match(SolidityParser.T__57)
                self.state = 704
                self.typeName(0)
                pass

            elif la_ == 2:
                self.state = 705
                self.match(SolidityParser.PayableKeyword)
                self.state = 706
                self.match(SolidityParser.T__21)
                self.state = 707
                self.expression(0)
                self.state = 708
                self.match(SolidityParser.T__22)
                pass

            elif la_ == 3:
                self.state = 710
                self.match(SolidityParser.T__21)
                self.state = 711
                self.expression(0)
                self.state = 712
                self.match(SolidityParser.T__22)
                pass

            elif la_ == 4:
                self.state = 714
                _la = self._input.LA(1)
                if not(_la==SolidityParser.T__55 or _la==SolidityParser.T__56):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 715
                self.expression(19)
                pass

            elif la_ == 5:
                self.state = 716
                _la = self._input.LA(1)
                if not(_la==SolidityParser.T__59 or _la==SolidityParser.T__60):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 717
                self.expression(18)
                pass

            elif la_ == 6:
                self.state = 718
                _la = self._input.LA(1)
                if not(_la==SolidityParser.T__61 or _la==SolidityParser.T__62):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 719
                self.expression(17)
                pass

            elif la_ == 7:
                self.state = 720
                self.match(SolidityParser.T__63)
                self.state = 721
                self.expression(16)
                pass

            elif la_ == 8:
                self.state = 722
                self.match(SolidityParser.T__3)
                self.state = 723
                self.expression(15)
                pass

            elif la_ == 9:
                self.state = 724
                self.primaryExpression()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 802
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,84,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 800
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
                    if la_ == 1:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 727
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 728
                        self.match(SolidityParser.T__64)
                        self.state = 729
                        self.expression(15)
                        pass

                    elif la_ == 2:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 730
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 731
                        _la = self._input.LA(1)
                        if not(((((_la - 12)) & ~0x3f) == 0 and ((1 << (_la - 12)) & ((1 << (SolidityParser.T__11 - 12)) | (1 << (SolidityParser.T__65 - 12)) | (1 << (SolidityParser.T__66 - 12)))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 732
                        self.expression(14)
                        pass

                    elif la_ == 3:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 733
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 734
                        _la = self._input.LA(1)
                        if not(_la==SolidityParser.T__59 or _la==SolidityParser.T__60):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 735
                        self.expression(13)
                        pass

                    elif la_ == 4:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 736
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 737
                        _la = self._input.LA(1)
                        if not(_la==SolidityParser.T__67 or _la==SolidityParser.T__68):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 738
                        self.expression(12)
                        pass

                    elif la_ == 5:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 739
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 740
                        self.match(SolidityParser.T__69)
                        self.state = 741
                        self.expression(11)
                        pass

                    elif la_ == 6:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 742
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 743
                        self.match(SolidityParser.T__2)
                        self.state = 744
                        self.expression(10)
                        pass

                    elif la_ == 7:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 745
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 746
                        self.match(SolidityParser.T__70)
                        self.state = 747
                        self.expression(9)
                        pass

                    elif la_ == 8:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 748
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 749
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__4) | (1 << SolidityParser.T__5) | (1 << SolidityParser.T__6) | (1 << SolidityParser.T__7))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 750
                        self.expression(8)
                        pass

                    elif la_ == 9:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 751
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 752
                        _la = self._input.LA(1)
                        if not(_la==SolidityParser.T__71 or _la==SolidityParser.T__72):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 753
                        self.expression(7)
                        pass

                    elif la_ == 10:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 754
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 755
                        self.match(SolidityParser.T__73)
                        self.state = 756
                        self.expression(6)
                        pass

                    elif la_ == 11:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 757
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 758
                        self.match(SolidityParser.T__74)
                        self.state = 759
                        self.expression(5)
                        pass

                    elif la_ == 12:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 760
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 761
                        self.match(SolidityParser.T__75)
                        self.state = 762
                        self.expression(0)
                        self.state = 763
                        self.match(SolidityParser.T__58)
                        self.state = 764
                        self.expression(4)
                        pass

                    elif la_ == 13:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 766
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 767
                        _la = self._input.LA(1)
                        if not(_la==SolidityParser.T__8 or ((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & ((1 << (SolidityParser.T__76 - 77)) | (1 << (SolidityParser.T__77 - 77)) | (1 << (SolidityParser.T__78 - 77)) | (1 << (SolidityParser.T__79 - 77)) | (1 << (SolidityParser.T__80 - 77)) | (1 << (SolidityParser.T__81 - 77)) | (1 << (SolidityParser.T__82 - 77)) | (1 << (SolidityParser.T__83 - 77)) | (1 << (SolidityParser.T__84 - 77)) | (1 << (SolidityParser.T__85 - 77)))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 768
                        self.expression(3)
                        pass

                    elif la_ == 14:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 769
                        if not self.precpred(self._ctx, 28):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 28)")
                        self.state = 770
                        _la = self._input.LA(1)
                        if not(_la==SolidityParser.T__55 or _la==SolidityParser.T__56):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass

                    elif la_ == 15:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 771
                        if not self.precpred(self._ctx, 26):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 26)")
                        self.state = 772
                        self.match(SolidityParser.T__32)
                        self.state = 774
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__3) | (1 << SolidityParser.T__12) | (1 << SolidityParser.T__21) | (1 << SolidityParser.T__32) | (1 << SolidityParser.T__39) | (1 << SolidityParser.T__50) | (1 << SolidityParser.T__51) | (1 << SolidityParser.T__52) | (1 << SolidityParser.T__53) | (1 << SolidityParser.T__54) | (1 << SolidityParser.T__55) | (1 << SolidityParser.T__56) | (1 << SolidityParser.T__57) | (1 << SolidityParser.T__59) | (1 << SolidityParser.T__60) | (1 << SolidityParser.T__61) | (1 << SolidityParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SolidityParser.T__63 - 64)) | (1 << (SolidityParser.Int - 64)) | (1 << (SolidityParser.Uint - 64)) | (1 << (SolidityParser.Byte - 64)) | (1 << (SolidityParser.Fixed - 64)) | (1 << (SolidityParser.Ufixed - 64)) | (1 << (SolidityParser.BooleanLiteral - 64)) | (1 << (SolidityParser.DecimalNumber - 64)) | (1 << (SolidityParser.HexNumber - 64)) | (1 << (SolidityParser.HexLiteralFragment - 64)) | (1 << (SolidityParser.PayableKeyword - 64)) | (1 << (SolidityParser.TypeKeyword - 64)) | (1 << (SolidityParser.Identifier - 64)) | (1 << (SolidityParser.StringLiteralFragment - 64)))) != 0):
                            self.state = 773
                            self.expression(0)


                        self.state = 776
                        self.match(SolidityParser.T__33)
                        pass

                    elif la_ == 16:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 777
                        if not self.precpred(self._ctx, 25):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 25)")
                        self.state = 778
                        self.match(SolidityParser.T__32)
                        self.state = 780
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__3) | (1 << SolidityParser.T__12) | (1 << SolidityParser.T__21) | (1 << SolidityParser.T__32) | (1 << SolidityParser.T__39) | (1 << SolidityParser.T__50) | (1 << SolidityParser.T__51) | (1 << SolidityParser.T__52) | (1 << SolidityParser.T__53) | (1 << SolidityParser.T__54) | (1 << SolidityParser.T__55) | (1 << SolidityParser.T__56) | (1 << SolidityParser.T__57) | (1 << SolidityParser.T__59) | (1 << SolidityParser.T__60) | (1 << SolidityParser.T__61) | (1 << SolidityParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SolidityParser.T__63 - 64)) | (1 << (SolidityParser.Int - 64)) | (1 << (SolidityParser.Uint - 64)) | (1 << (SolidityParser.Byte - 64)) | (1 << (SolidityParser.Fixed - 64)) | (1 << (SolidityParser.Ufixed - 64)) | (1 << (SolidityParser.BooleanLiteral - 64)) | (1 << (SolidityParser.DecimalNumber - 64)) | (1 << (SolidityParser.HexNumber - 64)) | (1 << (SolidityParser.HexLiteralFragment - 64)) | (1 << (SolidityParser.PayableKeyword - 64)) | (1 << (SolidityParser.TypeKeyword - 64)) | (1 << (SolidityParser.Identifier - 64)) | (1 << (SolidityParser.StringLiteralFragment - 64)))) != 0):
                            self.state = 779
                            self.expression(0)


                        self.state = 782
                        self.match(SolidityParser.T__58)
                        self.state = 784
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__3) | (1 << SolidityParser.T__12) | (1 << SolidityParser.T__21) | (1 << SolidityParser.T__32) | (1 << SolidityParser.T__39) | (1 << SolidityParser.T__50) | (1 << SolidityParser.T__51) | (1 << SolidityParser.T__52) | (1 << SolidityParser.T__53) | (1 << SolidityParser.T__54) | (1 << SolidityParser.T__55) | (1 << SolidityParser.T__56) | (1 << SolidityParser.T__57) | (1 << SolidityParser.T__59) | (1 << SolidityParser.T__60) | (1 << SolidityParser.T__61) | (1 << SolidityParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SolidityParser.T__63 - 64)) | (1 << (SolidityParser.Int - 64)) | (1 << (SolidityParser.Uint - 64)) | (1 << (SolidityParser.Byte - 64)) | (1 << (SolidityParser.Fixed - 64)) | (1 << (SolidityParser.Ufixed - 64)) | (1 << (SolidityParser.BooleanLiteral - 64)) | (1 << (SolidityParser.DecimalNumber - 64)) | (1 << (SolidityParser.HexNumber - 64)) | (1 << (SolidityParser.HexLiteralFragment - 64)) | (1 << (SolidityParser.PayableKeyword - 64)) | (1 << (SolidityParser.TypeKeyword - 64)) | (1 << (SolidityParser.Identifier - 64)) | (1 << (SolidityParser.StringLiteralFragment - 64)))) != 0):
                            self.state = 783
                            self.expression(0)


                        self.state = 786
                        self.match(SolidityParser.T__33)
                        pass

                    elif la_ == 17:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 787
                        if not self.precpred(self._ctx, 24):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 24)")
                        self.state = 788
                        self.match(SolidityParser.T__34)
                        self.state = 789
                        self.identifier()
                        pass

                    elif la_ == 18:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 790
                        if not self.precpred(self._ctx, 23):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 23)")
                        self.state = 791
                        self.match(SolidityParser.T__13)
                        self.state = 792
                        self.nameValueList()
                        self.state = 793
                        self.match(SolidityParser.T__15)
                        pass

                    elif la_ == 19:
                        localctx = SolidityParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 795
                        if not self.precpred(self._ctx, 22):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 22)")
                        self.state = 796
                        self.match(SolidityParser.T__21)
                        self.state = 797
                        self.functionCallArguments()
                        self.state = 798
                        self.match(SolidityParser.T__22)
                        pass

             
                self.state = 804
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,84,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BooleanLiteral(self):
            return self.getToken(SolidityParser.BooleanLiteral, 0)

        def numberLiteral(self):
            return self.getTypedRuleContext(SolidityParser.NumberLiteralContext,0)


        def hexLiteral(self):
            return self.getTypedRuleContext(SolidityParser.HexLiteralContext,0)


        def stringLiteral(self):
            return self.getTypedRuleContext(SolidityParser.StringLiteralContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def TypeKeyword(self):
            return self.getToken(SolidityParser.TypeKeyword, 0)

        def tupleExpression(self):
            return self.getTypedRuleContext(SolidityParser.TupleExpressionContext,0)


        def typeNameExpression(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_primaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryExpression" ):
                return visitor.visitPrimaryExpression(self)
            else:
                return visitor.visitChildren(self)




    def primaryExpression(self):

        localctx = SolidityParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_primaryExpression)
        try:
            self.state = 821
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 805
                self.match(SolidityParser.BooleanLiteral)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 806
                self.numberLiteral()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 807
                self.hexLiteral()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 808
                self.stringLiteral()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 809
                self.identifier()
                self.state = 812
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
                if la_ == 1:
                    self.state = 810
                    self.match(SolidityParser.T__32)
                    self.state = 811
                    self.match(SolidityParser.T__33)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 814
                self.match(SolidityParser.TypeKeyword)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 815
                self.tupleExpression()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 816
                self.typeNameExpression()
                self.state = 819
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
                if la_ == 1:
                    self.state = 817
                    self.match(SolidityParser.T__32)
                    self.state = 818
                    self.match(SolidityParser.T__33)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_expressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionList" ):
                listener.enterExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionList" ):
                listener.exitExpressionList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionList" ):
                return visitor.visitExpressionList(self)
            else:
                return visitor.visitChildren(self)




    def expressionList(self):

        localctx = SolidityParser.ExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_expressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 823
            self.expression(0)
            self.state = 828
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SolidityParser.T__14:
                self.state = 824
                self.match(SolidityParser.T__14)
                self.state = 825
                self.expression(0)
                self.state = 830
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameValueListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nameValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.NameValueContext)
            else:
                return self.getTypedRuleContext(SolidityParser.NameValueContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_nameValueList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNameValueList" ):
                listener.enterNameValueList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNameValueList" ):
                listener.exitNameValueList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNameValueList" ):
                return visitor.visitNameValueList(self)
            else:
                return visitor.visitChildren(self)




    def nameValueList(self):

        localctx = SolidityParser.NameValueListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_nameValueList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 831
            self.nameValue()
            self.state = 836
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,89,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 832
                    self.match(SolidityParser.T__14)
                    self.state = 833
                    self.nameValue() 
                self.state = 838
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,89,self._ctx)

            self.state = 840
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__14:
                self.state = 839
                self.match(SolidityParser.T__14)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_nameValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNameValue" ):
                listener.enterNameValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNameValue" ):
                listener.exitNameValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNameValue" ):
                return visitor.visitNameValue(self)
            else:
                return visitor.visitChildren(self)




    def nameValue(self):

        localctx = SolidityParser.NameValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_nameValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 842
            self.identifier()
            self.state = 843
            self.match(SolidityParser.T__58)
            self.state = 844
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nameValueList(self):
            return self.getTypedRuleContext(SolidityParser.NameValueListContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionCallArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallArguments" ):
                listener.enterFunctionCallArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallArguments" ):
                listener.exitFunctionCallArguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCallArguments" ):
                return visitor.visitFunctionCallArguments(self)
            else:
                return visitor.visitChildren(self)




    def functionCallArguments(self):

        localctx = SolidityParser.FunctionCallArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_functionCallArguments)
        self._la = 0 # Token type
        try:
            self.state = 854
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__13]:
                self.enterOuterAlt(localctx, 1)
                self.state = 846
                self.match(SolidityParser.T__13)
                self.state = 848
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__12) | (1 << SolidityParser.T__39) | (1 << SolidityParser.T__51))) != 0) or _la==SolidityParser.Identifier:
                    self.state = 847
                    self.nameValueList()


                self.state = 850
                self.match(SolidityParser.T__15)
                pass
            elif token in [SolidityParser.T__3, SolidityParser.T__12, SolidityParser.T__21, SolidityParser.T__22, SolidityParser.T__32, SolidityParser.T__39, SolidityParser.T__50, SolidityParser.T__51, SolidityParser.T__52, SolidityParser.T__53, SolidityParser.T__54, SolidityParser.T__55, SolidityParser.T__56, SolidityParser.T__57, SolidityParser.T__59, SolidityParser.T__60, SolidityParser.T__61, SolidityParser.T__62, SolidityParser.T__63, SolidityParser.Int, SolidityParser.Uint, SolidityParser.Byte, SolidityParser.Fixed, SolidityParser.Ufixed, SolidityParser.BooleanLiteral, SolidityParser.DecimalNumber, SolidityParser.HexNumber, SolidityParser.HexLiteralFragment, SolidityParser.PayableKeyword, SolidityParser.TypeKeyword, SolidityParser.Identifier, SolidityParser.StringLiteralFragment]:
                self.enterOuterAlt(localctx, 2)
                self.state = 852
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__3) | (1 << SolidityParser.T__12) | (1 << SolidityParser.T__21) | (1 << SolidityParser.T__32) | (1 << SolidityParser.T__39) | (1 << SolidityParser.T__50) | (1 << SolidityParser.T__51) | (1 << SolidityParser.T__52) | (1 << SolidityParser.T__53) | (1 << SolidityParser.T__54) | (1 << SolidityParser.T__55) | (1 << SolidityParser.T__56) | (1 << SolidityParser.T__57) | (1 << SolidityParser.T__59) | (1 << SolidityParser.T__60) | (1 << SolidityParser.T__61) | (1 << SolidityParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SolidityParser.T__63 - 64)) | (1 << (SolidityParser.Int - 64)) | (1 << (SolidityParser.Uint - 64)) | (1 << (SolidityParser.Byte - 64)) | (1 << (SolidityParser.Fixed - 64)) | (1 << (SolidityParser.Ufixed - 64)) | (1 << (SolidityParser.BooleanLiteral - 64)) | (1 << (SolidityParser.DecimalNumber - 64)) | (1 << (SolidityParser.HexNumber - 64)) | (1 << (SolidityParser.HexLiteralFragment - 64)) | (1 << (SolidityParser.PayableKeyword - 64)) | (1 << (SolidityParser.TypeKeyword - 64)) | (1 << (SolidityParser.Identifier - 64)) | (1 << (SolidityParser.StringLiteralFragment - 64)))) != 0):
                    self.state = 851
                    self.expressionList()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def functionCallArguments(self):
            return self.getTypedRuleContext(SolidityParser.FunctionCallArgumentsContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCall" ):
                listener.enterFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCall" ):
                listener.exitFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCall" ):
                return visitor.visitFunctionCall(self)
            else:
                return visitor.visitChildren(self)




    def functionCall(self):

        localctx = SolidityParser.FunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_functionCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 856
            self.expression(0)
            self.state = 857
            self.match(SolidityParser.T__21)
            self.state = 858
            self.functionCallArguments()
            self.state = 859
            self.match(SolidityParser.T__22)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TupleExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_tupleExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleExpression" ):
                listener.enterTupleExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleExpression" ):
                listener.exitTupleExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTupleExpression" ):
                return visitor.visitTupleExpression(self)
            else:
                return visitor.visitChildren(self)




    def tupleExpression(self):

        localctx = SolidityParser.TupleExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_tupleExpression)
        self._la = 0 # Token type
        try:
            self.state = 887
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__21]:
                self.enterOuterAlt(localctx, 1)
                self.state = 861
                self.match(SolidityParser.T__21)

                self.state = 863
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__3) | (1 << SolidityParser.T__12) | (1 << SolidityParser.T__21) | (1 << SolidityParser.T__32) | (1 << SolidityParser.T__39) | (1 << SolidityParser.T__50) | (1 << SolidityParser.T__51) | (1 << SolidityParser.T__52) | (1 << SolidityParser.T__53) | (1 << SolidityParser.T__54) | (1 << SolidityParser.T__55) | (1 << SolidityParser.T__56) | (1 << SolidityParser.T__57) | (1 << SolidityParser.T__59) | (1 << SolidityParser.T__60) | (1 << SolidityParser.T__61) | (1 << SolidityParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SolidityParser.T__63 - 64)) | (1 << (SolidityParser.Int - 64)) | (1 << (SolidityParser.Uint - 64)) | (1 << (SolidityParser.Byte - 64)) | (1 << (SolidityParser.Fixed - 64)) | (1 << (SolidityParser.Ufixed - 64)) | (1 << (SolidityParser.BooleanLiteral - 64)) | (1 << (SolidityParser.DecimalNumber - 64)) | (1 << (SolidityParser.HexNumber - 64)) | (1 << (SolidityParser.HexLiteralFragment - 64)) | (1 << (SolidityParser.PayableKeyword - 64)) | (1 << (SolidityParser.TypeKeyword - 64)) | (1 << (SolidityParser.Identifier - 64)) | (1 << (SolidityParser.StringLiteralFragment - 64)))) != 0):
                    self.state = 862
                    self.expression(0)


                self.state = 871
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SolidityParser.T__14:
                    self.state = 865
                    self.match(SolidityParser.T__14)
                    self.state = 867
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__3) | (1 << SolidityParser.T__12) | (1 << SolidityParser.T__21) | (1 << SolidityParser.T__32) | (1 << SolidityParser.T__39) | (1 << SolidityParser.T__50) | (1 << SolidityParser.T__51) | (1 << SolidityParser.T__52) | (1 << SolidityParser.T__53) | (1 << SolidityParser.T__54) | (1 << SolidityParser.T__55) | (1 << SolidityParser.T__56) | (1 << SolidityParser.T__57) | (1 << SolidityParser.T__59) | (1 << SolidityParser.T__60) | (1 << SolidityParser.T__61) | (1 << SolidityParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SolidityParser.T__63 - 64)) | (1 << (SolidityParser.Int - 64)) | (1 << (SolidityParser.Uint - 64)) | (1 << (SolidityParser.Byte - 64)) | (1 << (SolidityParser.Fixed - 64)) | (1 << (SolidityParser.Ufixed - 64)) | (1 << (SolidityParser.BooleanLiteral - 64)) | (1 << (SolidityParser.DecimalNumber - 64)) | (1 << (SolidityParser.HexNumber - 64)) | (1 << (SolidityParser.HexLiteralFragment - 64)) | (1 << (SolidityParser.PayableKeyword - 64)) | (1 << (SolidityParser.TypeKeyword - 64)) | (1 << (SolidityParser.Identifier - 64)) | (1 << (SolidityParser.StringLiteralFragment - 64)))) != 0):
                        self.state = 866
                        self.expression(0)


                    self.state = 873
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 874
                self.match(SolidityParser.T__22)
                pass
            elif token in [SolidityParser.T__32]:
                self.enterOuterAlt(localctx, 2)
                self.state = 875
                self.match(SolidityParser.T__32)
                self.state = 884
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__3) | (1 << SolidityParser.T__12) | (1 << SolidityParser.T__21) | (1 << SolidityParser.T__32) | (1 << SolidityParser.T__39) | (1 << SolidityParser.T__50) | (1 << SolidityParser.T__51) | (1 << SolidityParser.T__52) | (1 << SolidityParser.T__53) | (1 << SolidityParser.T__54) | (1 << SolidityParser.T__55) | (1 << SolidityParser.T__56) | (1 << SolidityParser.T__57) | (1 << SolidityParser.T__59) | (1 << SolidityParser.T__60) | (1 << SolidityParser.T__61) | (1 << SolidityParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SolidityParser.T__63 - 64)) | (1 << (SolidityParser.Int - 64)) | (1 << (SolidityParser.Uint - 64)) | (1 << (SolidityParser.Byte - 64)) | (1 << (SolidityParser.Fixed - 64)) | (1 << (SolidityParser.Ufixed - 64)) | (1 << (SolidityParser.BooleanLiteral - 64)) | (1 << (SolidityParser.DecimalNumber - 64)) | (1 << (SolidityParser.HexNumber - 64)) | (1 << (SolidityParser.HexLiteralFragment - 64)) | (1 << (SolidityParser.PayableKeyword - 64)) | (1 << (SolidityParser.TypeKeyword - 64)) | (1 << (SolidityParser.Identifier - 64)) | (1 << (SolidityParser.StringLiteralFragment - 64)))) != 0):
                    self.state = 876
                    self.expression(0)
                    self.state = 881
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SolidityParser.T__14:
                        self.state = 877
                        self.match(SolidityParser.T__14)
                        self.state = 878
                        self.expression(0)
                        self.state = 883
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 886
                self.match(SolidityParser.T__33)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeNameExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementaryTypeName(self):
            return self.getTypedRuleContext(SolidityParser.ElementaryTypeNameContext,0)


        def userDefinedTypeName(self):
            return self.getTypedRuleContext(SolidityParser.UserDefinedTypeNameContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_typeNameExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeNameExpression" ):
                listener.enterTypeNameExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeNameExpression" ):
                listener.exitTypeNameExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeNameExpression" ):
                return visitor.visitTypeNameExpression(self)
            else:
                return visitor.visitChildren(self)




    def typeNameExpression(self):

        localctx = SolidityParser.TypeNameExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_typeNameExpression)
        try:
            self.state = 891
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 889
                self.elementaryTypeName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 890
                self.userDefinedTypeName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,0)


        def assemblyExpression(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,0)


        def assemblyLocalDefinition(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyLocalDefinitionContext,0)


        def assemblyAssignment(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyAssignmentContext,0)


        def assemblyStackAssignment(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyStackAssignmentContext,0)


        def labelDefinition(self):
            return self.getTypedRuleContext(SolidityParser.LabelDefinitionContext,0)


        def assemblySwitch(self):
            return self.getTypedRuleContext(SolidityParser.AssemblySwitchContext,0)


        def assemblyFunctionDefinition(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyFunctionDefinitionContext,0)


        def assemblyFor(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyForContext,0)


        def assemblyIf(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyIfContext,0)


        def BreakKeyword(self):
            return self.getToken(SolidityParser.BreakKeyword, 0)

        def ContinueKeyword(self):
            return self.getToken(SolidityParser.ContinueKeyword, 0)

        def LeaveKeyword(self):
            return self.getToken(SolidityParser.LeaveKeyword, 0)

        def subAssembly(self):
            return self.getTypedRuleContext(SolidityParser.SubAssemblyContext,0)


        def numberLiteral(self):
            return self.getTypedRuleContext(SolidityParser.NumberLiteralContext,0)


        def stringLiteral(self):
            return self.getTypedRuleContext(SolidityParser.StringLiteralContext,0)


        def hexLiteral(self):
            return self.getTypedRuleContext(SolidityParser.HexLiteralContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyItem" ):
                listener.enterAssemblyItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyItem" ):
                listener.exitAssemblyItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyItem" ):
                return visitor.visitAssemblyItem(self)
            else:
                return visitor.visitChildren(self)




    def assemblyItem(self):

        localctx = SolidityParser.AssemblyItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_assemblyItem)
        try:
            self.state = 911
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 893
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 894
                self.assemblyBlock()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 895
                self.assemblyExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 896
                self.assemblyLocalDefinition()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 897
                self.assemblyAssignment()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 898
                self.assemblyStackAssignment()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 899
                self.labelDefinition()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 900
                self.assemblySwitch()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 901
                self.assemblyFunctionDefinition()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 902
                self.assemblyFor()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 903
                self.assemblyIf()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 904
                self.match(SolidityParser.BreakKeyword)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 905
                self.match(SolidityParser.ContinueKeyword)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 906
                self.match(SolidityParser.LeaveKeyword)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 907
                self.subAssembly()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 908
                self.numberLiteral()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 909
                self.stringLiteral()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 910
                self.hexLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.AssemblyItemContext)
            else:
                return self.getTypedRuleContext(SolidityParser.AssemblyItemContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyBlock" ):
                listener.enterAssemblyBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyBlock" ):
                listener.exitAssemblyBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyBlock" ):
                return visitor.visitAssemblyBlock(self)
            else:
                return visitor.visitChildren(self)




    def assemblyBlock(self):

        localctx = SolidityParser.AssemblyBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_assemblyBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 913
            self.match(SolidityParser.T__13)
            self.state = 917
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__12) | (1 << SolidityParser.T__13) | (1 << SolidityParser.T__25) | (1 << SolidityParser.T__28) | (1 << SolidityParser.T__39) | (1 << SolidityParser.T__40) | (1 << SolidityParser.T__45) | (1 << SolidityParser.T__47) | (1 << SolidityParser.T__51) | (1 << SolidityParser.T__54))) != 0) or ((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & ((1 << (SolidityParser.T__86 - 87)) | (1 << (SolidityParser.T__88 - 87)) | (1 << (SolidityParser.T__89 - 87)) | (1 << (SolidityParser.BooleanLiteral - 87)) | (1 << (SolidityParser.DecimalNumber - 87)) | (1 << (SolidityParser.HexNumber - 87)) | (1 << (SolidityParser.HexLiteralFragment - 87)) | (1 << (SolidityParser.BreakKeyword - 87)) | (1 << (SolidityParser.ContinueKeyword - 87)) | (1 << (SolidityParser.LeaveKeyword - 87)) | (1 << (SolidityParser.Identifier - 87)) | (1 << (SolidityParser.StringLiteralFragment - 87)))) != 0):
                self.state = 914
                self.assemblyItem()
                self.state = 919
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 920
            self.match(SolidityParser.T__15)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyCall(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyCallContext,0)


        def assemblyLiteral(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyLiteralContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyExpression" ):
                listener.enterAssemblyExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyExpression" ):
                listener.exitAssemblyExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyExpression" ):
                return visitor.visitAssemblyExpression(self)
            else:
                return visitor.visitChildren(self)




    def assemblyExpression(self):

        localctx = SolidityParser.AssemblyExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_assemblyExpression)
        try:
            self.state = 924
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__12, SolidityParser.T__39, SolidityParser.T__47, SolidityParser.T__51, SolidityParser.T__54, SolidityParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 922
                self.assemblyCall()
                pass
            elif token in [SolidityParser.BooleanLiteral, SolidityParser.DecimalNumber, SolidityParser.HexNumber, SolidityParser.HexLiteralFragment, SolidityParser.StringLiteralFragment]:
                self.enterOuterAlt(localctx, 2)
                self.state = 923
                self.assemblyLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def assemblyExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.AssemblyExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyCall" ):
                listener.enterAssemblyCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyCall" ):
                listener.exitAssemblyCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyCall" ):
                return visitor.visitAssemblyCall(self)
            else:
                return visitor.visitChildren(self)




    def assemblyCall(self):

        localctx = SolidityParser.AssemblyCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_assemblyCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 930
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
            if la_ == 1:
                self.state = 926
                self.match(SolidityParser.T__47)
                pass

            elif la_ == 2:
                self.state = 927
                self.match(SolidityParser.T__51)
                pass

            elif la_ == 3:
                self.state = 928
                self.match(SolidityParser.T__54)
                pass

            elif la_ == 4:
                self.state = 929
                self.identifier()
                pass


            self.state = 944
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__21:
                self.state = 932
                self.match(SolidityParser.T__21)
                self.state = 934
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__12) | (1 << SolidityParser.T__39) | (1 << SolidityParser.T__47) | (1 << SolidityParser.T__51) | (1 << SolidityParser.T__54))) != 0) or ((((_la - 98)) & ~0x3f) == 0 and ((1 << (_la - 98)) & ((1 << (SolidityParser.BooleanLiteral - 98)) | (1 << (SolidityParser.DecimalNumber - 98)) | (1 << (SolidityParser.HexNumber - 98)) | (1 << (SolidityParser.HexLiteralFragment - 98)) | (1 << (SolidityParser.Identifier - 98)) | (1 << (SolidityParser.StringLiteralFragment - 98)))) != 0):
                    self.state = 933
                    self.assemblyExpression()


                self.state = 940
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SolidityParser.T__14:
                    self.state = 936
                    self.match(SolidityParser.T__14)
                    self.state = 937
                    self.assemblyExpression()
                    self.state = 942
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 943
                self.match(SolidityParser.T__22)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyLocalDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyIdentifierList(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyIdentifierListContext,0)


        def assemblyExpression(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyLocalDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyLocalDefinition" ):
                listener.enterAssemblyLocalDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyLocalDefinition" ):
                listener.exitAssemblyLocalDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyLocalDefinition" ):
                return visitor.visitAssemblyLocalDefinition(self)
            else:
                return visitor.visitChildren(self)




    def assemblyLocalDefinition(self):

        localctx = SolidityParser.AssemblyLocalDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_assemblyLocalDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 946
            self.match(SolidityParser.T__86)
            self.state = 947
            self.assemblyIdentifierList()
            self.state = 950
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__87:
                self.state = 948
                self.match(SolidityParser.T__87)
                self.state = 949
                self.assemblyExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyIdentifierList(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyIdentifierListContext,0)


        def assemblyExpression(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyAssignment" ):
                listener.enterAssemblyAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyAssignment" ):
                listener.exitAssemblyAssignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyAssignment" ):
                return visitor.visitAssemblyAssignment(self)
            else:
                return visitor.visitChildren(self)




    def assemblyAssignment(self):

        localctx = SolidityParser.AssemblyAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_assemblyAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 952
            self.assemblyIdentifierList()
            self.state = 953
            self.match(SolidityParser.T__87)
            self.state = 954
            self.assemblyExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyIdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyIdentifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyIdentifierList" ):
                listener.enterAssemblyIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyIdentifierList" ):
                listener.exitAssemblyIdentifierList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyIdentifierList" ):
                return visitor.visitAssemblyIdentifierList(self)
            else:
                return visitor.visitChildren(self)




    def assemblyIdentifierList(self):

        localctx = SolidityParser.AssemblyIdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_assemblyIdentifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 956
            self.identifier()
            self.state = 961
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SolidityParser.T__14:
                self.state = 957
                self.match(SolidityParser.T__14)
                self.state = 958
                self.identifier()
                self.state = 963
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyStackAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyStackAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyStackAssignment" ):
                listener.enterAssemblyStackAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyStackAssignment" ):
                listener.exitAssemblyStackAssignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyStackAssignment" ):
                return visitor.visitAssemblyStackAssignment(self)
            else:
                return visitor.visitChildren(self)




    def assemblyStackAssignment(self):

        localctx = SolidityParser.AssemblyStackAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_assemblyStackAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 964
            self.match(SolidityParser.T__88)
            self.state = 965
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_labelDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelDefinition" ):
                listener.enterLabelDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelDefinition" ):
                listener.exitLabelDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabelDefinition" ):
                return visitor.visitLabelDefinition(self)
            else:
                return visitor.visitChildren(self)




    def labelDefinition(self):

        localctx = SolidityParser.LabelDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_labelDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 967
            self.identifier()
            self.state = 968
            self.match(SolidityParser.T__58)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblySwitchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyExpression(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,0)


        def assemblyCase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.AssemblyCaseContext)
            else:
                return self.getTypedRuleContext(SolidityParser.AssemblyCaseContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblySwitch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblySwitch" ):
                listener.enterAssemblySwitch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblySwitch" ):
                listener.exitAssemblySwitch(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblySwitch" ):
                return visitor.visitAssemblySwitch(self)
            else:
                return visitor.visitChildren(self)




    def assemblySwitch(self):

        localctx = SolidityParser.AssemblySwitchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_assemblySwitch)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 970
            self.match(SolidityParser.T__89)
            self.state = 971
            self.assemblyExpression()
            self.state = 975
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SolidityParser.T__90 or _la==SolidityParser.T__91:
                self.state = 972
                self.assemblyCase()
                self.state = 977
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyCaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyLiteral(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyLiteralContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,0)


        def assemblyType(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyTypeContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyCase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyCase" ):
                listener.enterAssemblyCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyCase" ):
                listener.exitAssemblyCase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyCase" ):
                return visitor.visitAssemblyCase(self)
            else:
                return visitor.visitChildren(self)




    def assemblyCase(self):

        localctx = SolidityParser.AssemblyCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_assemblyCase)
        self._la = 0 # Token type
        try:
            self.state = 987
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.T__90]:
                self.enterOuterAlt(localctx, 1)
                self.state = 978
                self.match(SolidityParser.T__90)
                self.state = 979
                self.assemblyLiteral()
                self.state = 981
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SolidityParser.T__58:
                    self.state = 980
                    self.assemblyType()


                self.state = 983
                self.assemblyBlock()
                pass
            elif token in [SolidityParser.T__91]:
                self.enterOuterAlt(localctx, 2)
                self.state = 985
                self.match(SolidityParser.T__91)
                self.state = 986
                self.assemblyBlock()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyFunctionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,0)


        def assemblyTypedVariableList(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyTypedVariableListContext,0)


        def assemblyFunctionReturns(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyFunctionReturnsContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyFunctionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyFunctionDefinition" ):
                listener.enterAssemblyFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyFunctionDefinition" ):
                listener.exitAssemblyFunctionDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyFunctionDefinition" ):
                return visitor.visitAssemblyFunctionDefinition(self)
            else:
                return visitor.visitChildren(self)




    def assemblyFunctionDefinition(self):

        localctx = SolidityParser.AssemblyFunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_assemblyFunctionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 989
            self.match(SolidityParser.T__28)
            self.state = 990
            self.identifier()
            self.state = 991
            self.match(SolidityParser.T__21)
            self.state = 993
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__12) | (1 << SolidityParser.T__39) | (1 << SolidityParser.T__51))) != 0) or _la==SolidityParser.Identifier:
                self.state = 992
                self.assemblyTypedVariableList()


            self.state = 995
            self.match(SolidityParser.T__22)
            self.state = 997
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__60:
                self.state = 996
                self.assemblyFunctionReturns()


            self.state = 999
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyFunctionReturnsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyTypedVariableList(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyTypedVariableListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyFunctionReturns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyFunctionReturns" ):
                listener.enterAssemblyFunctionReturns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyFunctionReturns" ):
                listener.exitAssemblyFunctionReturns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyFunctionReturns" ):
                return visitor.visitAssemblyFunctionReturns(self)
            else:
                return visitor.visitChildren(self)




    def assemblyFunctionReturns(self):

        localctx = SolidityParser.AssemblyFunctionReturnsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_assemblyFunctionReturns)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1001
            self.match(SolidityParser.T__60)
            self.state = 1002
            self.match(SolidityParser.T__5)
            self.state = 1003
            self.assemblyTypedVariableList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyForContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.AssemblyBlockContext)
            else:
                return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,i)


        def assemblyExpression(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyFor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyFor" ):
                listener.enterAssemblyFor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyFor" ):
                listener.exitAssemblyFor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyFor" ):
                return visitor.visitAssemblyFor(self)
            else:
                return visitor.visitChildren(self)




    def assemblyFor(self):

        localctx = SolidityParser.AssemblyForContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_assemblyFor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1005
            self.match(SolidityParser.T__25)
            self.state = 1006
            self.assemblyBlock()
            self.state = 1007
            self.assemblyExpression()
            self.state = 1008
            self.assemblyBlock()
            self.state = 1009
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyIfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyExpression(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyExpressionContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyIf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyIf" ):
                listener.enterAssemblyIf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyIf" ):
                listener.exitAssemblyIf(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyIf" ):
                return visitor.visitAssemblyIf(self)
            else:
                return visitor.visitChildren(self)




    def assemblyIf(self):

        localctx = SolidityParser.AssemblyIfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_assemblyIf)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1011
            self.match(SolidityParser.T__40)
            self.state = 1012
            self.assemblyExpression()
            self.state = 1013
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringLiteral(self):
            return self.getTypedRuleContext(SolidityParser.StringLiteralContext,0)


        def DecimalNumber(self):
            return self.getToken(SolidityParser.DecimalNumber, 0)

        def HexNumber(self):
            return self.getToken(SolidityParser.HexNumber, 0)

        def hexLiteral(self):
            return self.getTypedRuleContext(SolidityParser.HexLiteralContext,0)


        def BooleanLiteral(self):
            return self.getToken(SolidityParser.BooleanLiteral, 0)

        def assemblyType(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyTypeContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyLiteral" ):
                listener.enterAssemblyLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyLiteral" ):
                listener.exitAssemblyLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyLiteral" ):
                return visitor.visitAssemblyLiteral(self)
            else:
                return visitor.visitChildren(self)




    def assemblyLiteral(self):

        localctx = SolidityParser.AssemblyLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_assemblyLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1020
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SolidityParser.StringLiteralFragment]:
                self.state = 1015
                self.stringLiteral()
                pass
            elif token in [SolidityParser.DecimalNumber]:
                self.state = 1016
                self.match(SolidityParser.DecimalNumber)
                pass
            elif token in [SolidityParser.HexNumber]:
                self.state = 1017
                self.match(SolidityParser.HexNumber)
                pass
            elif token in [SolidityParser.HexLiteralFragment]:
                self.state = 1018
                self.hexLiteral()
                pass
            elif token in [SolidityParser.BooleanLiteral]:
                self.state = 1019
                self.match(SolidityParser.BooleanLiteral)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1023
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                self.state = 1022
                self.assemblyType()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyTypedVariableListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def assemblyType(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyTypeContext,0)


        def assemblyTypedVariableList(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyTypedVariableListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyTypedVariableList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyTypedVariableList" ):
                listener.enterAssemblyTypedVariableList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyTypedVariableList" ):
                listener.exitAssemblyTypedVariableList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyTypedVariableList" ):
                return visitor.visitAssemblyTypedVariableList(self)
            else:
                return visitor.visitChildren(self)




    def assemblyTypedVariableList(self):

        localctx = SolidityParser.AssemblyTypedVariableListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_assemblyTypedVariableList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1025
            self.identifier()
            self.state = 1027
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__58:
                self.state = 1026
                self.assemblyType()


            self.state = 1031
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SolidityParser.T__14:
                self.state = 1029
                self.match(SolidityParser.T__14)
                self.state = 1030
                self.assemblyTypedVariableList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyType" ):
                listener.enterAssemblyType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyType" ):
                listener.exitAssemblyType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyType" ):
                return visitor.visitAssemblyType(self)
            else:
                return visitor.visitChildren(self)




    def assemblyType(self):

        localctx = SolidityParser.AssemblyTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_assemblyType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1033
            self.match(SolidityParser.T__58)
            self.state = 1034
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubAssemblyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def assemblyBlock(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyBlockContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_subAssembly

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubAssembly" ):
                listener.enterSubAssembly(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubAssembly" ):
                listener.exitSubAssembly(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubAssembly" ):
                return visitor.visitSubAssembly(self)
            else:
                return visitor.visitChildren(self)




    def subAssembly(self):

        localctx = SolidityParser.SubAssemblyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_subAssembly)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1036
            self.match(SolidityParser.T__45)
            self.state = 1037
            self.identifier()
            self.state = 1038
            self.assemblyBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DecimalNumber(self):
            return self.getToken(SolidityParser.DecimalNumber, 0)

        def HexNumber(self):
            return self.getToken(SolidityParser.HexNumber, 0)

        def NumberUnit(self):
            return self.getToken(SolidityParser.NumberUnit, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_numberLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumberLiteral" ):
                listener.enterNumberLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumberLiteral" ):
                listener.exitNumberLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumberLiteral" ):
                return visitor.visitNumberLiteral(self)
            else:
                return visitor.visitChildren(self)




    def numberLiteral(self):

        localctx = SolidityParser.NumberLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_numberLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1040
            _la = self._input.LA(1)
            if not(_la==SolidityParser.DecimalNumber or _la==SolidityParser.HexNumber):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1042
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.state = 1041
                self.match(SolidityParser.NumberUnit)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(SolidityParser.Identifier, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = SolidityParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1044
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SolidityParser.T__12) | (1 << SolidityParser.T__39) | (1 << SolidityParser.T__51))) != 0) or _la==SolidityParser.Identifier):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HexLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HexLiteralFragment(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.HexLiteralFragment)
            else:
                return self.getToken(SolidityParser.HexLiteralFragment, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_hexLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHexLiteral" ):
                listener.enterHexLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHexLiteral" ):
                listener.exitHexLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHexLiteral" ):
                return visitor.visitHexLiteral(self)
            else:
                return visitor.visitChildren(self)




    def hexLiteral(self):

        localctx = SolidityParser.HexLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_hexLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1047 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1046
                    self.match(SolidityParser.HexLiteralFragment)

                else:
                    raise NoViableAltException(self)
                self.state = 1049 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,120,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteralFragment(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.StringLiteralFragment)
            else:
                return self.getToken(SolidityParser.StringLiteralFragment, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_stringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLiteral" ):
                return visitor.visitStringLiteral(self)
            else:
                return visitor.visitChildren(self)




    def stringLiteral(self):

        localctx = SolidityParser.StringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_stringLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1052 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1051
                    self.match(SolidityParser.StringLiteralFragment)

                else:
                    raise NoViableAltException(self)
                self.state = 1054 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,121,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[30] = self.typeName_sempred
        self._predicates[56] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def typeName_sempred(self, localctx:TypeNameContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 2)
         

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 28)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 26)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 25)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 24)
         

            if predIndex == 18:
                return self.precpred(self._ctx, 23)
         

            if predIndex == 19:
                return self.precpred(self._ctx, 22)
         




